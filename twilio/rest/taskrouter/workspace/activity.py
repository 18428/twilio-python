# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class ActivityList(ListResource):

    def __init__(self, domain, workspace_sid):
        super(ActivityList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'workspace_sid': workspace_sid,
        }
        self._uri = "/Workspaces/{workspace_sid}/Activities".format(**self._instance_kwargs)

    def read(self, friendly_name=values.unset, available=values.unset, limit=None,
             page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({
            "FriendlyName": friendly_name,
            "Available": available,
        })
        params.update(kwargs)
        
        return self._domain.read(
            self,
            ActivityInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, friendly_name=values.unset, available=values.unset,
             page_token=None, page=None, page_size=None, **kwargs):
        params = values.of({
            "FriendlyName": friendly_name,
        })
        params.update(kwargs)
        
        return self._domain.page(
            self,
            ActivityInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def create(self, friendly_name, available):
        data = values.of({
            "FriendlyName": friendly_name,
            "Available": available,
        })
        
        return self._domain.create(
            ActivityInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )


class ActivityContext(InstanceContext):

    def __init__(self, domain, workspace_sid, sid):
        super(ActivityContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'workspace_sid': workspace_sid,
            'sid': sid,
        }
        self._uri = "/Workspaces/{workspace_sid}/Activities/{sid}".format(**self._instance_kwargs)

    def fetch(self):
        return self._domain.fetch(
            ActivityInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
        )

    def update(self, friendly_name):
        data = values.of({
            "FriendlyName": friendly_name,
        })
        
        return self._domain.update(
            ActivityInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def delete(self):
        return self._domain.delete("delete", self._uri)


class ActivityInstance(InstanceResource):

    def __init__(self, domain, payload, workspace_sid, sid=None):
        super(ActivityInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._available = payload['available']
        self._date_created = deserialize.iso8601_datetime(payload['date_created'])
        self._date_updated = deserialize.iso8601_datetime(payload['date_updated'])
        self._friendly_name = payload['friendly_name']
        self._sid = payload['sid']
        self._workspace_sid = payload['workspace_sid']
        
        # Context
        self._lazy_context = None
        self._context_workspace_sid = workspace_sid
        self._context_sid = sid or self._sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = ActivityContext(
                self._domain,
                self._context_workspace_sid,
                self._context_sid,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._account_sid

    @property
    def available(self):
        """ The available """
        return self._available

    @property
    def date_created(self):
        """ The date_created """
        return self._date_created

    @property
    def date_updated(self):
        """ The date_updated """
        return self._date_updated

    @property
    def friendly_name(self):
        """ The friendly_name """
        return self._friendly_name

    @property
    def sid(self):
        """ The sid """
        return self._sid

    @property
    def workspace_sid(self):
        """ The workspace_sid """
        return self._workspace_sid

    def fetch(self):
        self._context.fetch()

    def update(self, friendly_name):
        self._context.update(
            friendly_name,
        )

    def delete(self):
        self._context.delete()
