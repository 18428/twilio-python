# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource
from twilio.rest.v2010.workspace.activity import ActivityList
from twilio.rest.v2010.workspace.event import EventList
from twilio.rest.v2010.workspace.statistics import StatisticsContext
from twilio.rest.v2010.workspace.task import TaskList
from twilio.rest.v2010.workspace.task_queue import TaskQueueList
from twilio.rest.v2010.workspace.worker import WorkerList
from twilio.rest.v2010.workspace.workflow import WorkflowList


class WorkspaceList(ListResource):

    def __init__(self, domain):
        super(WorkspaceList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {}
        self._uri = "/Workspaces".format(**self._instance_kwargs)

    def read(self, friendly_name=values.unset, limit=None, page_size=None,
             **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({
            "FriendlyName": friendly_name,
        })
        params.update(kwargs)
        
        return self._domain.read(
            self,
            WorkspaceInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, friendly_name=values.unset, page_token=None, page=None,
             page_size=None, **kwargs):
        params = values.of({
            "FriendlyName": friendly_name,
        })
        params.update(kwargs)
        
        return self._domain.page(
            self,
            WorkspaceInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def create(self, friendly_name, event_callback_url=values.unset,
               template=values.unset):
        data = values.of({
            "FriendlyName": friendly_name,
            "EventCallbackUrl": event_callback_url,
            "Template": template,
        })
        
        return self._domain.create(
            WorkspaceInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            data=data,
        )


class WorkspaceContext(InstanceContext):

    def __init__(self, domain, sid):
        super(WorkspaceContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'sid': sid,
        }
        self._uri = "/Workspaces/{sid}".format(**self._instance_kwargs)
        
        # Dependents
        self._activities = None
        self._events = None
        self._tasks = None
        self._task_queues = None
        self._workers = None
        self._workflows = None
        self._statistics = None

    def fetch(self):
        return self._domain.fetch(
            WorkspaceInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
        )

    def update(self, default_activity_sid=values.unset,
               event_callback_url=values.unset, friendly_name=values.unset,
               timeout_activity_sid=values.unset):
        data = values.of({
            "DefaultActivitySid": default_activity_sid,
            "EventCallbackUrl": event_callback_url,
            "FriendlyName": friendly_name,
            "TimeoutActivitySid": timeout_activity_sid,
        })
        
        return self._domain.update(
            WorkspaceInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def delete(self):
        return self._domain.delete("delete", self._uri)

    @property
    def activities(self):
        if self._activities is None:
            self._activities = ActivityList(
                self._domain,
                workspace_sid=self._instance_kwargs['sid'],
            )
        return self._activities

    @property
    def events(self):
        if self._events is None:
            self._events = EventList(
                self._domain,
                workspace_sid=self._instance_kwargs['sid'],
            )
        return self._events

    @property
    def tasks(self):
        if self._tasks is None:
            self._tasks = TaskList(
                self._domain,
                workspace_sid=self._instance_kwargs['sid'],
            )
        return self._tasks

    @property
    def task_queues(self):
        if self._task_queues is None:
            self._task_queues = TaskQueueList(
                self._domain,
                workspace_sid=self._instance_kwargs['sid'],
            )
        return self._task_queues

    @property
    def workers(self):
        if self._workers is None:
            self._workers = WorkerList(
                self._domain,
                workspace_sid=self._instance_kwargs['sid'],
            )
        return self._workers

    @property
    def workflows(self):
        if self._workflows is None:
            self._workflows = WorkflowList(
                self._domain,
                workspace_sid=self._instance_kwargs['sid'],
            )
        return self._workflows

    @property
    def statistics(self):
        if self._statistics is None:
            self._statistics = StatisticsContext(
                self._domain,
                workspace_sid=self._instance_kwargs['sid'],
            )
        return self._statistics


class WorkspaceInstance(InstanceResource):

    def __init__(self, domain, payload, sid=None):
        super(WorkspaceInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._date_created = deserialize.iso8601_datetime(payload['date_created'])
        self._date_updated = deserialize.iso8601_datetime(payload['date_updated'])
        self._default_activity_name = payload['default_activity_name']
        self._default_activity_sid = payload['default_activity_sid']
        self._event_callback_url = payload['event_callback_url']
        self._friendly_name = payload['friendly_name']
        self._sid = payload['sid']
        self._timeout_activity_name = payload['timeout_activity_name']
        self._timeout_activity_sid = payload['timeout_activity_sid']
        
        # Context
        self._lazy_context = None
        self._context_sid = sid or self._sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = WorkspaceContext(
                self._domain,
                self._context_sid,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._account_sid

    @property
    def date_created(self):
        """ The date_created """
        return self._date_created

    @property
    def date_updated(self):
        """ The date_updated """
        return self._date_updated

    @property
    def default_activity_name(self):
        """ The default_activity_name """
        return self._default_activity_name

    @property
    def default_activity_sid(self):
        """ The default_activity_sid """
        return self._default_activity_sid

    @property
    def event_callback_url(self):
        """ The event_callback_url """
        return self._event_callback_url

    @property
    def friendly_name(self):
        """ The friendly_name """
        return self._friendly_name

    @property
    def sid(self):
        """ The sid """
        return self._sid

    @property
    def timeout_activity_name(self):
        """ The timeout_activity_name """
        return self._timeout_activity_name

    @property
    def timeout_activity_sid(self):
        """ The timeout_activity_sid """
        return self._timeout_activity_sid

    def fetch(self):
        self._context.fetch()

    def update(self, default_activity_sid=values.unset,
               event_callback_url=values.unset, friendly_name=values.unset,
               timeout_activity_sid=values.unset):
        self._context.update(
            default_activity_sid=default_activity_sid,
            event_callback_url=event_callback_url,
            friendly_name=friendly_name,
            timeout_activity_sid=timeout_activity_sid,
        )

    def delete(self):
        self._context.delete()
