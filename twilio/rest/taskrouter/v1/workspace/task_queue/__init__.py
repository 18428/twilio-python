# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource
from twilio.rest.taskrouter.v1.workspace.task_queue.task_queue_statistics import TaskQueueStatisticsList
from twilio.rest.taskrouter.v1.workspace.task_queue.task_queues_statistics import TaskQueuesStatisticsList


class TaskQueueList(ListResource):

    def __init__(self, version, workspace_sid):
        """
        Initialize the TaskQueueList
        
        :param Version version: Version that contains the resource
        :param workspace_sid: The workspace_sid
        
        :returns: TaskQueueList
        :rtype: TaskQueueList
        """
        super(TaskQueueList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'workspace_sid': workspace_sid,
        }
        self._uri = '/Workspaces/{workspace_sid}/TaskQueues'.format(**self._kwargs)
        
        # Components
        self._statistics = None

    def stream(self, friendly_name=values.unset,
               evaluate_worker_attributes=values.unset, limit=None, page_size=None,
               **kwargs):
        """
        Streams TaskQueueInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param unicode friendly_name: The friendly_name
        :param unicode evaluate_worker_attributes: The evaluate_worker_attributes
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)
        
        :returns: Generator that will yield up to limit results
        :rtype: generator
        """
        limits = self._version.read_limits(limit, page_size)
        
        params = values.of({
            'FriendlyName': friendly_name,
            'EvaluateWorkerAttributes': evaluate_worker_attributes,
            'PageSize': limits['page_size'],
        })
        params.update(kwargs)
        
        return self._version.stream(
            self,
            TaskQueueInstance,
            self._kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def read(self, friendly_name=values.unset,
             evaluate_worker_attributes=values.unset, limit=None, page_size=None,
             **kwargs):
        """
        Reads TaskQueueInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param unicode friendly_name: The friendly_name
        :param unicode evaluate_worker_attributes: The evaluate_worker_attributes
        :param int limit: Upper limit for the number of records to return. read() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, read() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)
        
        :returns: Generator that will yield up to limit results
        :rtype: generator
        """
        return list(self.stream(
            friendly_name=friendly_name,
            evaluate_worker_attributes=evaluate_worker_attributes,
            limit=limit,
            page_size=page_size,
            **kwargs
        ))

    def page(self, friendly_name=values.unset,
             evaluate_worker_attributes=values.unset, page_token=None,
             page_number=None, page_size=None, **kwargs):
        """
        Retrieve a single page of TaskQueueInstance records from the API.
        Request is executed immediately
        
        :param unicode friendly_name: The friendly_name
        :param unicode evaluate_worker_attributes: The evaluate_worker_attributes
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50
        
        :returns: Page of TaskQueueInstance
        :rtype: Page
        """
        params = values.of({
            'FriendlyName': friendly_name,
            'EvaluateWorkerAttributes': evaluate_worker_attributes,
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })
        params.update(kwargs)
        
        return self._version.page(
            self,
            TaskQueueInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def create(self, friendly_name, reservation_activity_sid,
               assignment_activity_sid, target_workers=values.unset,
               max_reserved_workers=values.unset):
        """
        Create a new TaskQueueInstance
        
        :param unicode friendly_name: The friendly_name
        :param unicode reservation_activity_sid: The reservation_activity_sid
        :param unicode assignment_activity_sid: The assignment_activity_sid
        :param unicode target_workers: The target_workers
        :param unicode max_reserved_workers: The max_reserved_workers
        
        :returns: Newly created TaskQueueInstance
        :rtype: TaskQueueInstance
        """
        data = values.of({
            'FriendlyName': friendly_name,
            'ReservationActivitySid': reservation_activity_sid,
            'AssignmentActivitySid': assignment_activity_sid,
            'TargetWorkers': target_workers,
            'MaxReservedWorkers': max_reserved_workers,
        })
        
        return self._version.create(
            TaskQueueInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    @property
    def statistics(self):
        """
        Access the statistics
        
        :returns: TaskQueuesStatisticsList
        :rtype: TaskQueuesStatisticsList
        """
        if self._statistics is None:
            self._statistics = TaskQueuesStatisticsList(self._version, **self._kwargs)
        return self._statistics

    def get(self, sid):
        """
        Constructs a TaskQueueContext
        
        :param sid: The sid
        
        :returns: TaskQueueContext
        :rtype: TaskQueueContext
        """
        return TaskQueueContext(self._version, sid=sid, **self._kwargs)

    def __call__(self, sid):
        """
        Constructs a TaskQueueContext
        
        :param sid: The sid
        
        :returns: TaskQueueContext
        :rtype: TaskQueueContext
        """
        return TaskQueueContext(self._version, sid=sid, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Taskrouter.V1.TaskQueueList>'


class TaskQueueContext(InstanceContext):

    def __init__(self, version, workspace_sid, sid):
        """
        Initialize the TaskQueueContext
        
        :param Version version
        :param workspace_sid: The workspace_sid
        :param sid: The sid
        
        :returns: TaskQueueContext
        :rtype: TaskQueueContext
        """
        super(TaskQueueContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'workspace_sid': workspace_sid,
            'sid': sid,
        }
        self._uri = '/Workspaces/{workspace_sid}/TaskQueues/{sid}'.format(**self._kwargs)
        
        # Dependents
        self._statistics = None

    def fetch(self):
        """
        Fetch a TaskQueueInstance
        
        :returns: Fetched TaskQueueInstance
        :rtype: TaskQueueInstance
        """
        params = values.of({})
        
        return self._version.fetch(
            TaskQueueInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def update(self, friendly_name=values.unset, target_workers=values.unset,
               reservation_activity_sid=values.unset,
               assignment_activity_sid=values.unset,
               max_reserved_workers=values.unset):
        """
        Update the TaskQueueInstance
        
        :param unicode friendly_name: The friendly_name
        :param unicode target_workers: The target_workers
        :param unicode reservation_activity_sid: The reservation_activity_sid
        :param unicode assignment_activity_sid: The assignment_activity_sid
        :param unicode max_reserved_workers: The max_reserved_workers
        
        :returns: Updated TaskQueueInstance
        :rtype: TaskQueueInstance
        """
        data = values.of({
            'FriendlyName': friendly_name,
            'TargetWorkers': target_workers,
            'ReservationActivitySid': reservation_activity_sid,
            'AssignmentActivitySid': assignment_activity_sid,
            'MaxReservedWorkers': max_reserved_workers,
        })
        
        return self._version.update(
            TaskQueueInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def delete(self):
        """
        Deletes the TaskQueueInstance
        
        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete('delete', self._uri)

    @property
    def statistics(self):
        """
        Access the statistics
        
        :returns: TaskQueueStatisticsList
        :rtype: TaskQueueStatisticsList
        """
        if self._statistics is None:
            self._statistics = TaskQueueStatisticsList(
                self._version,
                workspace_sid=self._kwargs['workspace_sid'],
                task_queue_sid=self._kwargs['sid'],
            )
        return self._statistics

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Taskrouter.V1.TaskQueueContext {}>'.format(context)


class TaskQueueInstance(InstanceResource):

    def __init__(self, version, payload, workspace_sid, sid=None):
        """
        Initialize the TaskQueueInstance
        
        :returns: TaskQueueInstance
        :rtype: TaskQueueInstance
        """
        super(TaskQueueInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'assignment_activity_sid': payload['assignment_activity_sid'],
            'assignment_activity_name': payload['assignment_activity_name'],
            'date_created': deserialize.iso8601_datetime(payload['date_created']),
            'date_updated': deserialize.iso8601_datetime(payload['date_updated']),
            'friendly_name': payload['friendly_name'],
            'max_reserved_workers': deserialize.integer(payload['max_reserved_workers']),
            'reservation_activity_sid': payload['reservation_activity_sid'],
            'reservation_activity_name': payload['reservation_activity_name'],
            'sid': payload['sid'],
            'target_workers': payload['target_workers'],
            'url': payload['url'],
            'workspace_sid': payload['workspace_sid'],
        }
        
        # Context
        self._instance_context = None
        self._kwargs = {
            'workspace_sid': workspace_sid,
            'sid': sid or self._properties['sid'],
        }

    @property
    def _context(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context
        
        :returns: TaskQueueContext for this TaskQueueInstance
        :rtype: TaskQueueContext
        """
        if self._instance_context is None:
            self._instance_context = TaskQueueContext(
                self._version,
                self._kwargs['workspace_sid'],
                self._kwargs['sid'],
            )
        return self._instance_context

    @property
    def account_sid(self):
        """
        :returns: The account_sid
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def assignment_activity_sid(self):
        """
        :returns: The assignment_activity_sid
        :rtype: unicode
        """
        return self._properties['assignment_activity_sid']

    @property
    def assignment_activity_name(self):
        """
        :returns: The assignment_activity_name
        :rtype: unicode
        """
        return self._properties['assignment_activity_name']

    @property
    def date_created(self):
        """
        :returns: The date_created
        :rtype: datetime
        """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """
        :returns: The date_updated
        :rtype: datetime
        """
        return self._properties['date_updated']

    @property
    def friendly_name(self):
        """
        :returns: The friendly_name
        :rtype: unicode
        """
        return self._properties['friendly_name']

    @property
    def max_reserved_workers(self):
        """
        :returns: The max_reserved_workers
        :rtype: unicode
        """
        return self._properties['max_reserved_workers']

    @property
    def reservation_activity_sid(self):
        """
        :returns: The reservation_activity_sid
        :rtype: unicode
        """
        return self._properties['reservation_activity_sid']

    @property
    def reservation_activity_name(self):
        """
        :returns: The reservation_activity_name
        :rtype: unicode
        """
        return self._properties['reservation_activity_name']

    @property
    def sid(self):
        """
        :returns: The sid
        :rtype: unicode
        """
        return self._properties['sid']

    @property
    def target_workers(self):
        """
        :returns: The target_workers
        :rtype: unicode
        """
        return self._properties['target_workers']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    @property
    def workspace_sid(self):
        """
        :returns: The workspace_sid
        :rtype: unicode
        """
        return self._properties['workspace_sid']

    def fetch(self):
        """
        Fetch a TaskQueueInstance
        
        :returns: Fetched TaskQueueInstance
        :rtype: TaskQueueInstance
        """
        return self._context.fetch()

    def update(self, friendly_name=values.unset, target_workers=values.unset,
               reservation_activity_sid=values.unset,
               assignment_activity_sid=values.unset,
               max_reserved_workers=values.unset):
        """
        Update the TaskQueueInstance
        
        :param unicode friendly_name: The friendly_name
        :param unicode target_workers: The target_workers
        :param unicode reservation_activity_sid: The reservation_activity_sid
        :param unicode assignment_activity_sid: The assignment_activity_sid
        :param unicode max_reserved_workers: The max_reserved_workers
        
        :returns: Updated TaskQueueInstance
        :rtype: TaskQueueInstance
        """
        return self._context.update(
            friendly_name=friendly_name,
            target_workers=target_workers,
            reservation_activity_sid=reservation_activity_sid,
            assignment_activity_sid=assignment_activity_sid,
            max_reserved_workers=max_reserved_workers,
        )

    def delete(self):
        """
        Deletes the TaskQueueInstance
        
        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._context.delete()

    @property
    def statistics(self):
        """
        Access the statistics
        
        :returns: statistics
        :rtype: statistics
        """
        return self._context.statistics

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Taskrouter.V1.TaskQueueInstance {}>'.format(context)
