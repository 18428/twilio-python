# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import serialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class TaskQueueStatisticsList(ListResource):

    def __init__(self, version, workspace_sid, task_queue_sid):
        """
        Initialize the TaskQueueStatisticsList
        
        :param Version version: Version that contains the resource
        :param workspace_sid: The workspace_sid
        :param task_queue_sid: The task_queue_sid
        
        :returns: TaskQueueStatisticsList
        :rtype: TaskQueueStatisticsList
        """
        super(TaskQueueStatisticsList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'workspace_sid': workspace_sid,
            'task_queue_sid': task_queue_sid,
        }

    def get(self):
        """
        Constructs a TaskQueueStatisticsContext
        
        :returns: TaskQueueStatisticsContext
        :rtype: TaskQueueStatisticsContext
        """
        return TaskQueueStatisticsContext(self._version, **self._kwargs)

    def __call__(self):
        """
        Constructs a TaskQueueStatisticsContext
        
        :returns: TaskQueueStatisticsContext
        :rtype: TaskQueueStatisticsContext
        """
        return TaskQueueStatisticsContext(self._version, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Taskrouter.V1.TaskQueueStatisticsList>'


class TaskQueueStatisticsContext(InstanceContext):

    def __init__(self, version, workspace_sid, task_queue_sid):
        """
        Initialize the TaskQueueStatisticsContext
        
        :param Version version
        :param workspace_sid: The workspace_sid
        :param task_queue_sid: The task_queue_sid
        
        :returns: TaskQueueStatisticsContext
        :rtype: TaskQueueStatisticsContext
        """
        super(TaskQueueStatisticsContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'workspace_sid': workspace_sid,
            'task_queue_sid': task_queue_sid,
        }
        self._uri = '/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/Statistics'.format(**self._kwargs)

    def fetch(self, end_date=values.unset, friendly_name=values.unset,
              minutes=values.unset, start_date=values.unset):
        """
        Fetch a TaskQueueStatisticsInstance
        
        :param datetime end_date: The end_date
        :param str friendly_name: The friendly_name
        :param str minutes: The minutes
        :param datetime start_date: The start_date
        
        :returns: Fetched TaskQueueStatisticsInstance
        :rtype: TaskQueueStatisticsInstance
        """
        params = values.of({
            'EndDate': serialize.iso8601_datetime(end_date),
            'FriendlyName': friendly_name,
            'Minutes': minutes,
            'StartDate': serialize.iso8601_datetime(start_date),
        })
        
        return self._version.fetch(
            TaskQueueStatisticsInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Taskrouter.V1.TaskQueueStatisticsContext {}>'.format(context)


class TaskQueueStatisticsInstance(InstanceResource):

    def __init__(self, version, payload, workspace_sid, task_queue_sid):
        """
        Initialize the TaskQueueStatisticsInstance
        
        :returns: TaskQueueStatisticsInstance
        :rtype: TaskQueueStatisticsInstance
        """
        super(TaskQueueStatisticsInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'cumulative': payload['cumulative'],
            'realtime': payload['realtime'],
            'task_queue_sid': payload['task_queue_sid'],
            'workspace_sid': payload['workspace_sid'],
        }
        
        # Context
        self._instance_context = None
        self._kwargs = {
            'workspace_sid': workspace_sid,
            'task_queue_sid': task_queue_sid,
        }

    @property
    def _context(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context
        
        :returns: TaskQueueStatisticsContext for this TaskQueueStatisticsInstance
        :rtype: TaskQueueStatisticsContext
        """
        if self._instance_context is None:
            self._instance_context = TaskQueueStatisticsContext(
                self._version,
                self._kwargs['workspace_sid'],
                self._kwargs['task_queue_sid'],
            )
        return self._instance_context

    @property
    def account_sid(self):
        """
        :returns: The account_sid
        :rtype: str
        """
        return self._properties['account_sid']

    @property
    def cumulative(self):
        """
        :returns: The cumulative
        :rtype: str
        """
        return self._properties['cumulative']

    @property
    def realtime(self):
        """
        :returns: The realtime
        :rtype: str
        """
        return self._properties['realtime']

    @property
    def task_queue_sid(self):
        """
        :returns: The task_queue_sid
        :rtype: str
        """
        return self._properties['task_queue_sid']

    @property
    def workspace_sid(self):
        """
        :returns: The workspace_sid
        :rtype: str
        """
        return self._properties['workspace_sid']

    def fetch(self, end_date=values.unset, friendly_name=values.unset,
              minutes=values.unset, start_date=values.unset):
        """
        Fetch a TaskQueueStatisticsInstance
        
        :param datetime end_date: The end_date
        :param str friendly_name: The friendly_name
        :param str minutes: The minutes
        :param datetime start_date: The start_date
        
        :returns: Fetched TaskQueueStatisticsInstance
        :rtype: TaskQueueStatisticsInstance
        """
        return self._context.fetch(
            end_date=end_date,
            friendly_name=friendly_name,
            minutes=minutes,
            start_date=start_date,
        )

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Taskrouter.V1.TaskQueueStatisticsInstance {}>'.format(context)
