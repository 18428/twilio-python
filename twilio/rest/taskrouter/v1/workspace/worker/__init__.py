# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource
from twilio.rest.taskrouter.v1.workspace.worker.worker_statistics import StatisticsContext
from twilio.rest.taskrouter.v1.workspace.worker.workers_statistics import StatisticsContext


class WorkerList(ListResource):

    def __init__(self, version, workspace_sid):
        super(WorkerList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'workspace_sid': workspace_sid,
        }
        self._uri = "/Workspaces/{workspace_sid}/Workers".format(**self._kwargs)
        
        # Components
        self._statistics = None

    def read(self, activity_name=values.unset, activity_sid=values.unset,
             available=values.unset, friendly_name=values.unset,
             target_workers_expression=values.unset, task_queue_name=values.unset,
             task_queue_sid=values.unset, limit=None, page_size=None, **kwargs):
        limits = self._version.read_limits(limit, page_size)
        
        params = values.of({
            "ActivityName": activity_name,
            "ActivitySid": activity_sid,
            "Available": available,
            "FriendlyName": friendly_name,
            "TargetWorkersExpression": target_workers_expression,
            "TaskQueueName": task_queue_name,
            "TaskQueueSid": task_queue_sid,
        })
        params.update(kwargs)
        
        return self._version.read(
            self,
            WorkerInstance,
            self._kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, activity_name=values.unset, activity_sid=values.unset,
             available=values.unset, friendly_name=values.unset,
             target_workers_expression=values.unset, task_queue_name=values.unset,
             task_queue_sid=values.unset, page_token=None, page_number=None,
             page_size=None, **kwargs):
        params = values.of({
            "ActivityName": activity_name,
            "ActivitySid": activity_sid,
            "Available": available,
            "FriendlyName": friendly_name,
            "TargetWorkersExpression": target_workers_expression,
            "TaskQueueName": task_queue_name,
            "TaskQueueSid": task_queue_sid,
            "PageToken": page_token,
            "Page": page_number,
            "PageSize": page_size,
        })
        params.update(kwargs)
        
        return self._version.page(
            self,
            WorkerInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def create(self, friendly_name, activity_sid=values.unset,
               attributes=values.unset):
        data = values.of({
            "FriendlyName": friendly_name,
            "ActivitySid": activity_sid,
            "Attributes": attributes,
        })
        
        return self._version.create(
            WorkerInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    @property
    def statistics(self):
        if self._statistics is None:
            self._statistics = StatisticsContext(self._version, **self._kwargs)
        return self._statistics

    def __call__(self, sid):
        return WorkerContext(self._version, sid=sid, **self._kwargs)

    def __repr__(self):
        return '<Twilio.Taskrouter.V1.WorkerList>'


class WorkerContext(InstanceContext):

    def __init__(self, version, workspace_sid, sid):
        super(WorkerContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'workspace_sid': workspace_sid,
            'sid': sid,
        }
        self._uri = "/Workspaces/{workspace_sid}/Workers/{sid}".format(**self._kwargs)
        
        # Dependents
        self._statistics = None

    def fetch(self):
        params = values.of({})
        
        return self._version.fetch(
            WorkerInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def update(self, activity_sid=values.unset, attributes=values.unset,
               friendly_name=values.unset):
        data = values.of({
            "ActivitySid": activity_sid,
            "Attributes": attributes,
            "FriendlyName": friendly_name,
        })
        
        return self._version.update(
            WorkerInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def delete(self):
        return self._version.delete("delete", self._uri)

    @property
    def statistics(self):
        if self._statistics is None:
            self._statistics = StatisticsContext(
                self._version,
                workspace_sid=self._kwargs['workspace_sid'],
                worker_sid=self._kwargs['sid'],
            )
        return self._statistics


class WorkerInstance(InstanceResource):

    def __init__(self, version, payload, workspace_sid, sid=None):
        super(WorkerInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'activity_name': payload['activity_name'],
            'activity_sid': payload['activity_sid'],
            'attributes': payload['attributes'],
            'available': payload['available'],
            'date_created': deserialize.iso8601_datetime(payload['date_created']),
            'date_status_changed': deserialize.iso8601_datetime(payload['date_status_changed']),
            'date_updated': deserialize.iso8601_datetime(payload['date_updated']),
            'friendly_name': payload['friendly_name'],
            'sid': payload['sid'],
            'workspace_sid': payload['workspace_sid'],
        }
        
        # Context
        self._lazy_context = None
        self._context_properties = {
            'workspace_sid': workspace_sid,
            'sid': sid or self._properties['sid'],
        }

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = WorkerContext(
                self._version,
                self._context_properties['workspace_sid'],
                self._context_properties['sid'],
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._properties['account_sid']

    @property
    def activity_name(self):
        """ The activity_name """
        return self._properties['activity_name']

    @property
    def activity_sid(self):
        """ The activity_sid """
        return self._properties['activity_sid']

    @property
    def attributes(self):
        """ The attributes """
        return self._properties['attributes']

    @property
    def available(self):
        """ The available """
        return self._properties['available']

    @property
    def date_created(self):
        """ The date_created """
        return self._properties['date_created']

    @property
    def date_status_changed(self):
        """ The date_status_changed """
        return self._properties['date_status_changed']

    @property
    def date_updated(self):
        """ The date_updated """
        return self._properties['date_updated']

    @property
    def friendly_name(self):
        """ The friendly_name """
        return self._properties['friendly_name']

    @property
    def sid(self):
        """ The sid """
        return self._properties['sid']

    @property
    def workspace_sid(self):
        """ The workspace_sid """
        return self._properties['workspace_sid']

    def fetch(self):
        self._context.fetch()

    def update(self, activity_sid=values.unset, attributes=values.unset,
               friendly_name=values.unset):
        self._context.update(
            activity_sid=activity_sid,
            attributes=attributes,
            friendly_name=friendly_name,
        )

    def delete(self):
        self._context.delete()

    @property
    def statistics(self):
        return self._context.statistics
