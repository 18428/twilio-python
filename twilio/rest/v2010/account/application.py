# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class ApplicationList(ListResource):

    def __init__(self, domain, account_sid):
        super(ApplicationList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/Applications.json".format(**self._instance_kwargs)

    def create(self, friendly_name, api_version=values.unset,
               voice_url=values.unset, voice_method=values.unset,
               voice_fallback_url=values.unset, voice_fallback_method=values.unset,
               status_callback=values.unset, status_callback_method=values.unset,
               voice_caller_id_lookup=values.unset, sms_url=values.unset,
               sms_method=values.unset, sms_fallback_url=values.unset,
               sms_fallback_method=values.unset, sms_status_callback=values.unset,
               message_status_callback=values.unset):
        data = values.of({
            "FriendlyName": friendly_name,
            "ApiVersion": api_version,
            "VoiceUrl": voice_url,
            "VoiceMethod": voice_method,
            "VoiceFallbackUrl": voice_fallback_url,
            "VoiceFallbackMethod": voice_fallback_method,
            "StatusCallback": status_callback,
            "StatusCallbackMethod": status_callback_method,
            "VoiceCallerIdLookup": voice_caller_id_lookup,
            "SmsUrl": sms_url,
            "SmsMethod": sms_method,
            "SmsFallbackUrl": sms_fallback_url,
            "SmsFallbackMethod": sms_fallback_method,
            "SmsStatusCallback": sms_status_callback,
            "MessageStatusCallback": message_status_callback,
        })
        
        return self._domain.create(
            ApplicationInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def read(self, friendly_name=values.unset, limit=None, page_size=None,
             **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({
            "FriendlyName": friendly_name,
        })
        params.update(kwargs)
        
        return self._domain.read(
            self,
            ApplicationInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, friendly_name=values.unset, page_token=None, page=None,
             page_size=None, **kwargs):
        params = values.of({})
        params.update(kwargs)
        
        return self._domain.page(
            self,
            ApplicationInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )


class ApplicationContext(InstanceContext):

    def __init__(self, domain, account_sid, sid):
        super(ApplicationContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = "/Accounts/{account_sid}/Applications/{sid}.json".format(**self._instance_kwargs)

    def delete(self):
        return self._domain.delete("delete", self._uri)

    def fetch(self):
        return self._domain.fetch(
            ApplicationInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
        )

    def update(self, friendly_name=values.unset, api_version=values.unset,
               voice_url=values.unset, voice_method=values.unset,
               voice_fallback_url=values.unset, voice_fallback_method=values.unset,
               status_callback=values.unset, status_callback_method=values.unset,
               voice_caller_id_lookup=values.unset, sms_url=values.unset,
               sms_method=values.unset, sms_fallback_url=values.unset,
               sms_fallback_method=values.unset, sms_status_callback=values.unset,
               message_status_callback=values.unset):
        data = values.of({
            "FriendlyName": friendly_name,
            "ApiVersion": api_version,
            "VoiceUrl": voice_url,
            "VoiceMethod": voice_method,
            "VoiceFallbackUrl": voice_fallback_url,
            "VoiceFallbackMethod": voice_fallback_method,
            "StatusCallback": status_callback,
            "StatusCallbackMethod": status_callback_method,
            "VoiceCallerIdLookup": voice_caller_id_lookup,
            "SmsUrl": sms_url,
            "SmsMethod": sms_method,
            "SmsFallbackUrl": sms_fallback_url,
            "SmsFallbackMethod": sms_fallback_method,
            "SmsStatusCallback": sms_status_callback,
            "MessageStatusCallback": message_status_callback,
        })
        
        return self._domain.update(
            ApplicationInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )


class ApplicationInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid, sid=None):
        super(ApplicationInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._api_version = payload['api_version']
        self._date_created = deserialize.iso8601_datetime(payload['date_created'])
        self._date_updated = deserialize.iso8601_datetime(payload['date_updated'])
        self._friendly_name = payload['friendly_name']
        self._message_status_callback = payload['message_status_callback']
        self._sid = payload['sid']
        self._sms_fallback_method = payload['sms_fallback_method']
        self._sms_fallback_url = payload['sms_fallback_url']
        self._sms_method = payload['sms_method']
        self._sms_status_callback = payload['sms_status_callback']
        self._sms_url = payload['sms_url']
        self._status_callback = payload['status_callback']
        self._status_callback_method = payload['status_callback_method']
        self._uri = payload['uri']
        self._voice_caller_id_lookup = payload['voice_caller_id_lookup']
        self._voice_fallback_method = payload['voice_fallback_method']
        self._voice_fallback_url = payload['voice_fallback_url']
        self._voice_method = payload['voice_method']
        self._voice_url = payload['voice_url']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid
        self._context_sid = sid or self._sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = ApplicationContext(
                self._domain,
                self._context_account_sid,
                self._context_sid,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ A string that uniquely identifies this resource """
        return self._account_sid

    @property
    def api_version(self):
        """ The API version to use """
        return self._api_version

    @property
    def date_created(self):
        """ Date this resource was created """
        return self._date_created

    @property
    def date_updated(self):
        """ Date this resource was last updated """
        return self._date_updated

    @property
    def friendly_name(self):
        """ Human readable description of this resource """
        return self._friendly_name

    @property
    def message_status_callback(self):
        """ URL to make requests to with status updates """
        return self._message_status_callback

    @property
    def sid(self):
        """ A string that uniquely identifies this resource """
        return self._sid

    @property
    def sms_fallback_method(self):
        """ HTTP method to use with sms_fallback_method """
        return self._sms_fallback_method

    @property
    def sms_fallback_url(self):
        """ Fallback URL if there's an error parsing TwiML """
        return self._sms_fallback_url

    @property
    def sms_method(self):
        """ HTTP method to use with sms_url """
        return self._sms_method

    @property
    def sms_status_callback(self):
        """ URL Twilio with request with status updates """
        return self._sms_status_callback

    @property
    def sms_url(self):
        """ URL Twilio will request when receiving an SMS """
        return self._sms_url

    @property
    def status_callback(self):
        """ URL to hit with status updates """
        return self._status_callback

    @property
    def status_callback_method(self):
        """ HTTP method to use with the status callback """
        return self._status_callback_method

    @property
    def uri(self):
        """ URI for this resource """
        return self._uri

    @property
    def voice_caller_id_lookup(self):
        """ True or False """
        return self._voice_caller_id_lookup

    @property
    def voice_fallback_method(self):
        """ HTTP method to use with the fallback url """
        return self._voice_fallback_method

    @property
    def voice_fallback_url(self):
        """ Fallback URL """
        return self._voice_fallback_url

    @property
    def voice_method(self):
        """ HTTP method to use with the URL """
        return self._voice_method

    @property
    def voice_url(self):
        """ URL Twilio will make requests to when relieving a call """
        return self._voice_url

    def delete(self):
        self._context.delete()

    def fetch(self):
        self._context.fetch()

    def update(self, friendly_name=values.unset, api_version=values.unset,
               voice_url=values.unset, voice_method=values.unset,
               voice_fallback_url=values.unset, voice_fallback_method=values.unset,
               status_callback=values.unset, status_callback_method=values.unset,
               voice_caller_id_lookup=values.unset, sms_url=values.unset,
               sms_method=values.unset, sms_fallback_url=values.unset,
               sms_fallback_method=values.unset, sms_status_callback=values.unset,
               message_status_callback=values.unset):
        self._context.update(
            friendly_name=friendly_name,
            api_version=api_version,
            voice_url=voice_url,
            voice_method=voice_method,
            voice_fallback_url=voice_fallback_url,
            voice_fallback_method=voice_fallback_method,
            status_callback=status_callback,
            status_callback_method=status_callback_method,
            voice_caller_id_lookup=voice_caller_id_lookup,
            sms_url=sms_url,
            sms_method=sms_method,
            sms_fallback_url=sms_fallback_url,
            sms_fallback_method=sms_fallback_method,
            sms_status_callback=sms_status_callback,
            message_status_callback=message_status_callback,
        )
