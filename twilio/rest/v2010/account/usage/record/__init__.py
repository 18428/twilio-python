# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest import serialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource
from twilio.rest.v2010.account.usage.record.all_time import AllTimeList
from twilio.rest.v2010.account.usage.record.daily import DailyList
from twilio.rest.v2010.account.usage.record.last_month import LastMonthList
from twilio.rest.v2010.account.usage.record.monthly import MonthlyList
from twilio.rest.v2010.account.usage.record.this_month import ThisMonthList
from twilio.rest.v2010.account.usage.record.today import TodayList
from twilio.rest.v2010.account.usage.record.yearly import YearlyList
from twilio.rest.v2010.account.usage.record.yesterday import YesterdayList


class RecordList(ListResource):

    def __init__(self, domain, account_sid):
        super(RecordList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/Usage/Records".format(**self._instance_kwargs)
        
        # Components
        self._all_time = None
        self._daily = None
        self._last_month = None
        self._monthly = None
        self._this_month = None
        self._today = None
        self._yearly = None
        self._yesterday = None

    def read(self, category=values.unset, start_date_before=values.unset,
             start_date=values.unset, start_date_after=values.unset,
             end_date_before=values.unset, end_date=values.unset,
             end_date_after=values.unset, limit=None, page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({
            "Category": category,
            "StartDate<": serialize.iso8601_date(start_date_before),
            "StartDate": serialize.iso8601_date(start_date),
            "StartDate>": serialize.iso8601_date(start_date_after),
            "EndDate<": serialize.iso8601_date(end_date_before),
            "EndDate": serialize.iso8601_date(end_date),
            "EndDate>": serialize.iso8601_date(end_date_after),
        })
        params.update(kwargs)
        
        return self._domain.read(
            self,
            RecordInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, category=values.unset, start_date_before=values.unset,
             start_date=values.unset, start_date_after=values.unset,
             end_date_before=values.unset, end_date=values.unset,
             end_date_after=values.unset, page_token=None, page=None,
             page_size=None, **kwargs):
        params = values.of({
            "Category": category,
            "StartDate<": serialize.iso8601_date(start_date_before),
            "StartDate": serialize.iso8601_date(start_date),
            "StartDate>": serialize.iso8601_date(start_date_after),
            "EndDate<": serialize.iso8601_date(end_date_before),
            "EndDate": serialize.iso8601_date(end_date),
            "EndDate>": serialize.iso8601_date(end_date_after),
        })
        params.update(kwargs)
        
        return self._domain.page(
            self,
            RecordInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )

    @property
    def all_time(self):
        if self._all_time is None:
            self._all_time = AllTimeList(self._domain, **self._instance_kwargs)
        return self._all_time

    @property
    def daily(self):
        if self._daily is None:
            self._daily = DailyList(self._domain, **self._instance_kwargs)
        return self._daily

    @property
    def last_month(self):
        if self._last_month is None:
            self._last_month = LastMonthList(self._domain, **self._instance_kwargs)
        return self._last_month

    @property
    def monthly(self):
        if self._monthly is None:
            self._monthly = MonthlyList(self._domain, **self._instance_kwargs)
        return self._monthly

    @property
    def this_month(self):
        if self._this_month is None:
            self._this_month = ThisMonthList(self._domain, **self._instance_kwargs)
        return self._this_month

    @property
    def today(self):
        if self._today is None:
            self._today = TodayList(self._domain, **self._instance_kwargs)
        return self._today

    @property
    def yearly(self):
        if self._yearly is None:
            self._yearly = YearlyList(self._domain, **self._instance_kwargs)
        return self._yearly

    @property
    def yesterday(self):
        if self._yesterday is None:
            self._yesterday = YesterdayList(self._domain, **self._instance_kwargs)
        return self._yesterday


class RecordContext(InstanceContext):

    def __init__(self, domain):
        super(RecordContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {}
        self._uri = "None".format(**self._instance_kwargs)


class RecordInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid):
        super(RecordInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._api_version = payload['api_version']
        self._category = payload['category']
        self._count = payload['count']
        self._count_unit = payload['count_unit']
        self._description = payload['description']
        self._end_date = deserialize.iso8601_datetime(payload['end_date'])
        self._price = payload['price']
        self._price_unit = payload['price_unit']
        self._start_date = deserialize.iso8601_datetime(payload['start_date'])
        self._subresource_uris = payload['subresource_uris']
        self._uri = payload['uri']
        self._usage = payload['usage']
        self._usage_unit = payload['usage_unit']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = RecordContext(
                self._domain,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The Account that accrued the usage """
        return self._account_sid

    @property
    def api_version(self):
        """ The api_version """
        return self._api_version

    @property
    def category(self):
        """ The category of usage """
        return self._category

    @property
    def count(self):
        """ The number of usage events (e.g. the number of calls). """
        return self._count

    @property
    def count_unit(self):
        """ The unit in which `Count` is measured """
        return self._count_unit

    @property
    def description(self):
        """ A human-readable description of the usage category. """
        return self._description

    @property
    def end_date(self):
        """ The last date usage is included in this record """
        return self._end_date

    @property
    def price(self):
        """ The total price of the usage """
        return self._price

    @property
    def price_unit(self):
        """ The currency in which `Price` is measured """
        return self._price_unit

    @property
    def start_date(self):
        """ The first date usage is included in this record """
        return self._start_date

    @property
    def subresource_uris(self):
        """ Subresources Uris for this UsageRecord """
        return self._subresource_uris

    @property
    def uri(self):
        """ The URI for this resource """
        return self._uri

    @property
    def usage(self):
        """ The amount of usage """
        return self._usage

    @property
    def usage_unit(self):
        """ The units in which `Usage` is measured """
        return self._usage_unit
