# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class AllTimeList(ListResource):

    def __init__(self, domain, account_sid):
        super(AllTimeList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/Usage/Records/AllTime".format(**self._instance_kwargs)

    def read(self, limit=None, page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({})
        params.update(kwargs)
        
        return self._domain.read(
            self,
            AllTimeInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, page_token=None, page=None, page_size=None, **kwargs):
        params = values.of({})
        params.update(kwargs)
        
        return self._domain.page(
            self,
            AllTimeInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )


class AllTimeContext(InstanceContext):

    def __init__(self, domain):
        super(AllTimeContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {}
        self._uri = "None".format(**self._instance_kwargs)


class AllTimeInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid):
        super(AllTimeInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._api_version = payload['api_version']
        self._category = payload['category']
        self._count = payload['count']
        self._count_unit = payload['count_unit']
        self._description = payload['description']
        self._end_date = deserialize.iso8601_datetime(payload['end_date'])
        self._price = payload['price']
        self._price_unit = payload['price_unit']
        self._start_date = deserialize.iso8601_datetime(payload['start_date'])
        self._subresource_uris = payload['subresource_uris']
        self._uri = payload['uri']
        self._usage = payload['usage']
        self._usage_unit = payload['usage_unit']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = AllTimeContext(
                self._domain,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._account_sid

    @property
    def api_version(self):
        """ The api_version """
        return self._api_version

    @property
    def category(self):
        """ The category """
        return self._category

    @property
    def count(self):
        """ The count """
        return self._count

    @property
    def count_unit(self):
        """ The count_unit """
        return self._count_unit

    @property
    def description(self):
        """ The description """
        return self._description

    @property
    def end_date(self):
        """ The end_date """
        return self._end_date

    @property
    def price(self):
        """ The price """
        return self._price

    @property
    def price_unit(self):
        """ The price_unit """
        return self._price_unit

    @property
    def start_date(self):
        """ The start_date """
        return self._start_date

    @property
    def subresource_uris(self):
        """ The subresource_uris """
        return self._subresource_uris

    @property
    def uri(self):
        """ The uri """
        return self._uri

    @property
    def usage(self):
        """ The usage """
        return self._usage

    @property
    def usage_unit(self):
        """ The usage_unit """
        return self._usage_unit
