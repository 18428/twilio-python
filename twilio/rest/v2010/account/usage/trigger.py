# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class TriggerList(ListResource):

    def __init__(self, domain, account_sid):
        super(TriggerList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/Usage/Triggers.json".format(**self._instance_kwargs)

    def create(self, callback_url, trigger_value, usage_category,
               callback_method=values.unset, friendly_name=values.unset,
               recurring=values.unset, trigger_by=values.unset):
        data = values.of({
            "CallbackUrl": callback_url,
            "TriggerValue": trigger_value,
            "UsageCategory": usage_category,
            "CallbackMethod": callback_method,
            "FriendlyName": friendly_name,
            "Recurring": recurring,
            "TriggerBy": trigger_by,
        })
        
        return self._domain.create(
            TriggerInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def read(self, recurring=values.unset, trigger_by=values.unset,
             usage_category=values.unset, limit=None, page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({
            "Recurring": recurring,
            "TriggerBy": trigger_by,
            "UsageCategory": usage_category,
        })
        params.update(kwargs)
        
        return self._domain.read(
            self,
            TriggerInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, recurring=values.unset, trigger_by=values.unset,
             usage_category=values.unset, page_token=None, page=None,
             page_size=None, **kwargs):
        params = values.of({
            "Recurring": recurring,
            "TriggerBy": trigger_by,
            "UsageCategory": usage_category,
        })
        params.update(kwargs)
        
        return self._domain.page(
            self,
            TriggerInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )


class TriggerContext(InstanceContext):

    def __init__(self, domain, account_sid, sid):
        super(TriggerContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = "/Accounts/{account_sid}/Usage/Triggers/{sid}.json".format(**self._instance_kwargs)

    def fetch(self):
        return self._domain.fetch(
            TriggerInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
        )

    def update(self, callback_method=values.unset, callback_url=values.unset,
               friendly_name=values.unset):
        data = values.of({
            "CallbackMethod": callback_method,
            "CallbackUrl": callback_url,
            "FriendlyName": friendly_name,
        })
        
        return self._domain.update(
            TriggerInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def delete(self):
        return self._domain.delete("delete", self._uri)


class TriggerInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid, sid=None):
        super(TriggerInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._api_version = payload['api_version']
        self._callback_method = payload['callback_method']
        self._callback_url = payload['callback_url']
        self._current_value = payload['current_value']
        self._date_created = deserialize.iso8601_datetime(payload['date_created'])
        self._date_fired = deserialize.iso8601_datetime(payload['date_fired'])
        self._date_updated = deserialize.iso8601_datetime(payload['date_updated'])
        self._friendly_name = payload['friendly_name']
        self._recurring = payload['recurring']
        self._sid = payload['sid']
        self._trigger_by = payload['trigger_by']
        self._trigger_value = payload['trigger_value']
        self._uri = payload['uri']
        self._usage_category = payload['usage_category']
        self._usage_record_uri = payload['usage_record_uri']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid
        self._context_sid = sid or self._sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = TriggerContext(
                self._domain,
                self._context_account_sid,
                self._context_sid,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account this trigger monitors. """
        return self._account_sid

    @property
    def api_version(self):
        """ The api_version """
        return self._api_version

    @property
    def callback_method(self):
        """ HTTP method to use with callback_url """
        return self._callback_method

    @property
    def callback_url(self):
        """ URL Twilio will request when the trigger fires """
        return self._callback_url

    @property
    def current_value(self):
        """ The current value of the field the trigger is watching. """
        return self._current_value

    @property
    def date_created(self):
        """ The date this resource was created """
        return self._date_created

    @property
    def date_fired(self):
        """ The date the trigger was last fired """
        return self._date_fired

    @property
    def date_updated(self):
        """ The date this resource was last updated """
        return self._date_updated

    @property
    def friendly_name(self):
        """ A user-specified, human-readable name for the trigger. """
        return self._friendly_name

    @property
    def recurring(self):
        """ How this trigger recurs """
        return self._recurring

    @property
    def sid(self):
        """ The trigger's unique Sid """
        return self._sid

    @property
    def trigger_by(self):
        """ The field in the UsageRecord that fires the trigger """
        return self._trigger_by

    @property
    def trigger_value(self):
        """ the value at which the trigger will fire """
        return self._trigger_value

    @property
    def uri(self):
        """ The URI for this resource """
        return self._uri

    @property
    def usage_category(self):
        """ The usage category the trigger watches """
        return self._usage_category

    @property
    def usage_record_uri(self):
        """ The URI of the UsageRecord this trigger is watching """
        return self._usage_record_uri

    def fetch(self):
        self._context.fetch()

    def update(self, callback_method=values.unset, callback_url=values.unset,
               friendly_name=values.unset):
        self._context.update(
            callback_method=callback_method,
            callback_url=callback_url,
            friendly_name=friendly_name,
        )

    def delete(self):
        self._context.delete()
