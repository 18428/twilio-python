# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class MobileList(ListResource):

    def __init__(self, domain, account_sid, country_code):
        super(MobileList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'country_code': country_code,
        }
        self._uri = "/Accounts/{account_sid}/AvailablePhoneNumbers/{country_code}/Mobile.json".format(**self._instance_kwargs)

    def read(self, beta=values.unset, limit=None, page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({
            "Beta": beta,
        })
        params.update(kwargs)
        
        return self._domain.read(
            self,
            MobileInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, beta=values.unset, page_token=None, page=None, page_size=None,
             **kwargs):
        params = values.of({})
        params.update(kwargs)
        
        return self._domain.page(
            self,
            MobileInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )


class MobileContext(InstanceContext):

    def __init__(self, domain):
        super(MobileContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {}
        self._uri = "None".format(**self._instance_kwargs)


class MobileInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid, country_code):
        super(MobileInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._friendly_name = payload['friendly_name']
        self._phone_number = payload['phone_number']
        self._lata = payload['lata']
        self._rate_center = payload['rate_center']
        self._latitude = payload['latitude']
        self._longitude = payload['longitude']
        self._region = payload['region']
        self._postal_code = payload['postal_code']
        self._iso_country = payload['iso_country']
        self._address_requirements = payload['address_requirements']
        self._beta = payload['beta']
        self._capabilities = payload['capabilities']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid
        self._context_country_code = country_code

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = MobileContext(
                self._domain,
            )
        return self._lazy_context

    @property
    def friendly_name(self):
        """ The friendly_name """
        return self._friendly_name

    @property
    def phone_number(self):
        """ The phone_number """
        return self._phone_number

    @property
    def lata(self):
        """ The lata """
        return self._lata

    @property
    def rate_center(self):
        """ The rate_center """
        return self._rate_center

    @property
    def latitude(self):
        """ The latitude """
        return self._latitude

    @property
    def longitude(self):
        """ The longitude """
        return self._longitude

    @property
    def region(self):
        """ The region """
        return self._region

    @property
    def postal_code(self):
        """ The postal_code """
        return self._postal_code

    @property
    def iso_country(self):
        """ The iso_country """
        return self._iso_country

    @property
    def address_requirements(self):
        """ The address_requirements """
        return self._address_requirements

    @property
    def beta(self):
        """ The beta """
        return self._beta

    @property
    def capabilities(self):
        """ The capabilities """
        return self._capabilities
