# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource
from twilio.rest.v2010.account.available_phone_number.local import LocalList
from twilio.rest.v2010.account.available_phone_number.mobile import MobileList
from twilio.rest.v2010.account.available_phone_number.toll_free import TollFreeList


class AvailablePhoneNumberCountryList(ListResource):

    def __init__(self, domain, account_sid):
        super(AvailablePhoneNumberCountryList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/AvailablePhoneNumbers.json".format(**self._instance_kwargs)

    def read(self, limit=None, page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({})
        params.update(kwargs)
        
        return self._domain.read(
            self,
            AvailablePhoneNumberCountryInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, page_token=None, page=None, page_size=None, **kwargs):
        params = values.of({})
        params.update(kwargs)
        
        return self._domain.page(
            self,
            AvailablePhoneNumberCountryInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )


class AvailablePhoneNumberCountryContext(InstanceContext):

    def __init__(self, domain, account_sid, country_code):
        super(AvailablePhoneNumberCountryContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'country_code': country_code,
        }
        self._uri = "/Accounts/{account_sid}/AvailablePhoneNumbers/{country_code}.json".format(**self._instance_kwargs)
        
        # Dependents
        self._local = None
        self._toll_free = None
        self._mobile = None

    def fetch(self):
        return self._domain.fetch(
            AvailablePhoneNumberCountryInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
        )

    @property
    def local(self):
        if self._local is None:
            self._local = LocalList(
                self._domain,
                country_code=self._instance_kwargs['country_code'],
            )
        return self._local

    @property
    def toll_free(self):
        if self._toll_free is None:
            self._toll_free = TollFreeList(
                self._domain,
                country_code=self._instance_kwargs['country_code'],
            )
        return self._toll_free

    @property
    def mobile(self):
        if self._mobile is None:
            self._mobile = MobileList(
                self._domain,
                country_code=self._instance_kwargs['country_code'],
            )
        return self._mobile


class AvailablePhoneNumberCountryInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid, country_code=None):
        super(AvailablePhoneNumberCountryInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._country_code = payload['country_code']
        self._country = payload['country']
        self._uri = payload['uri']
        self._beta = payload['beta']
        self._subresource_uris = payload['subresource_uris']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid
        self._context_country_code = country_code or self._country_code

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = AvailablePhoneNumberCountryContext(
                self._domain,
                self._context_account_sid,
                self._context_country_code,
            )
        return self._lazy_context

    @property
    def country_code(self):
        """ The country_code """
        return self._country_code

    @property
    def country(self):
        """ The country """
        return self._country

    @property
    def uri(self):
        """ The uri """
        return self._uri

    @property
    def beta(self):
        """ The beta """
        return self._beta

    @property
    def subresource_uris(self):
        """ The subresource_uris """
        return self._subresource_uris

    def fetch(self):
        self._context.fetch()
