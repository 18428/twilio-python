# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class MemberList(ListResource):

    def __init__(self, domain, account_sid, queue_sid):
        super(MemberList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'queue_sid': queue_sid,
        }
        self._uri = "/Accounts/{account_sid}/Queues/{queue_sid}/Members.json".format(**self._instance_kwargs)

    def read(self, limit=None, page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({})
        params.update(kwargs)
        
        return self._domain.read(
            self,
            MemberInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, page_token=None, page_number=None, page_size=None, **kwargs):
        params = values.of({
            "PageToken": page_token,
            "Page": page_number,
            "PageSize": page_size,
        })
        params.update(kwargs)
        
        return self._domain.page(
            self,
            MemberInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )


class MemberContext(InstanceContext):

    def __init__(self, domain, account_sid, queue_sid, call_sid):
        super(MemberContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'queue_sid': queue_sid,
            'call_sid': call_sid,
        }
        self._uri = "/Accounts/{account_sid}/Queues/{queue_sid}/Members/{call_sid}.json".format(**self._instance_kwargs)

    def fetch(self):
        params = values.of({})
        
        return self._domain.fetch(
            MemberInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def update(self, url, method):
        data = values.of({
            "Url": url,
            "Method": method,
        })
        
        return self._domain.update(
            MemberInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )


class MemberInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid, queue_sid, call_sid=None):
        super(MemberInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._call_sid = payload['call_sid']
        self._date_enqueued = deserialize.iso8601_datetime(payload['date_enqueued'])
        self._parent_sid = payload['parent_sid']
        self._position = payload['position']
        self._sid = payload['sid']
        self._uri = payload['uri']
        self._wait_time = payload['wait_time']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid
        self._context_queue_sid = queue_sid
        self._context_call_sid = call_sid or self._call_sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = MemberContext(
                self._domain,
                self._context_account_sid,
                self._context_queue_sid,
                self._context_call_sid,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._account_sid

    @property
    def call_sid(self):
        """ Unique string that identifies this resource """
        return self._call_sid

    @property
    def date_enqueued(self):
        """ The date the member was enqueued """
        return self._date_enqueued

    @property
    def parent_sid(self):
        """ The parent_sid """
        return self._parent_sid

    @property
    def position(self):
        """ This member's current position in the queue. """
        return self._position

    @property
    def sid(self):
        """ The sid """
        return self._sid

    @property
    def uri(self):
        """ The uri """
        return self._uri

    @property
    def wait_time(self):
        """ The number of seconds the member has been in the queue. """
        return self._wait_time

    def fetch(self):
        self._context.fetch()

    def update(self, url, method):
        self._context.update(
            url,
            method,
        )
