# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest import serialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource
from twilio.rest.v2010.account.call.feedback import FeedbackContext
from twilio.rest.v2010.account.call.feedback_summary import FeedbackSummaryList
from twilio.rest.v2010.account.call.notification import NotificationList
from twilio.rest.v2010.account.call.recording import RecordingList


class CallList(ListResource):

    def __init__(self, domain, account_sid):
        super(CallList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls.json".format(**self._instance_kwargs)
        
        # Components
        self._feedback_summaries = None

    def create(self, to, from_, method=values.unset, fallback_url=values.unset,
               fallback_method=values.unset, status_callback=values.unset,
               status_callback_method=values.unset, send_digits=values.unset,
               if_machine=values.unset, timeout=values.unset, record=values.unset,
               url=values.unset, application_sid=values.unset):
        data = values.of({
            "To": to,
            "From": from_,
            "Url": url,
            "ApplicationSid": application_sid,
            "Method": method,
            "FallbackUrl": fallback_url,
            "FallbackMethod": fallback_method,
            "StatusCallback": status_callback,
            "StatusCallbackMethod": status_callback_method,
            "SendDigits": send_digits,
            "IfMachine": if_machine,
            "Timeout": timeout,
            "Record": record,
        })
        
        return self._domain.create(
            CallInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def read(self, to=values.unset, from_=values.unset,
             parent_call_sid=values.unset, status=values.unset,
             start_time_before=values.unset, start_time=values.unset,
             start_time_after=values.unset, end_time_before=values.unset,
             end_time=values.unset, end_time_after=values.unset, limit=None,
             page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({
            "To": to,
            "From": from_,
            "ParentCallSid": parent_call_sid,
            "Status": status,
            "StartTime<": serialize.iso8601_date(start_time_before),
            "StartTime": serialize.iso8601_date(start_time),
            "StartTime>": serialize.iso8601_date(start_time_after),
            "EndTime<": serialize.iso8601_date(end_time_before),
            "EndTime": serialize.iso8601_date(end_time),
            "EndTime>": serialize.iso8601_date(end_time_after),
        })
        params.update(kwargs)
        
        return self._domain.read(
            self,
            CallInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, to=values.unset, from_=values.unset,
             parent_call_sid=values.unset, status=values.unset,
             start_time_before=values.unset, start_time=values.unset,
             start_time_after=values.unset, end_time_before=values.unset,
             end_time=values.unset, end_time_after=values.unset, page_token=None,
             page=None, page_size=None, **kwargs):
        params = values.of({
            "To": to,
            "From": from_,
            "ParentCallSid": parent_call_sid,
            "Status": status,
            "StartTime<": serialize.iso8601_date(start_time_before),
            "StartTime": serialize.iso8601_date(start_time),
            "StartTime>": serialize.iso8601_date(start_time_after),
            "EndTime<": serialize.iso8601_date(end_time_before),
            "EndTime": serialize.iso8601_date(end_time),
            "EndTime>": serialize.iso8601_date(end_time_after),
        })
        params.update(kwargs)
        
        return self._domain.page(
            self,
            CallInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )

    @property
    def feedback_summaries(self):
        if self._feedback_summaries is None:
            self._feedback_summaries = FeedbackSummaryList(self._domain, **self._instance_kwargs)
        return self._feedback_summaries


class CallContext(InstanceContext):

    def __init__(self, domain, account_sid, sid):
        super(CallContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/{sid}.json".format(**self._instance_kwargs)
        
        # Dependents
        self._recordings = None
        self._notifications = None
        self._feedback = None

    def delete(self):
        return self._domain.delete("delete", self._uri)

    def fetch(self):
        return self._domain.fetch(
            CallInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
        )

    def update(self, url=values.unset, method=values.unset, status=values.unset,
               fallback_url=values.unset, fallback_method=values.unset,
               status_callback=values.unset, status_callback_method=values.unset):
        data = values.of({
            "Url": url,
            "Method": method,
            "Status": status,
            "FallbackUrl": fallback_url,
            "FallbackMethod": fallback_method,
            "StatusCallback": status_callback,
            "StatusCallbackMethod": status_callback_method,
        })
        
        return self._domain.update(
            CallInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )

    @property
    def recordings(self):
        if self._recordings is None:
            self._recordings = RecordingList(
                self._domain,
                account_sid=self._instance_kwargs['account_sid'],
                call_sid=self._instance_kwargs['sid'],
            )
        return self._recordings

    @property
    def notifications(self):
        if self._notifications is None:
            self._notifications = NotificationList(
                self._domain,
                account_sid=self._instance_kwargs['account_sid'],
                call_sid=self._instance_kwargs['sid'],
            )
        return self._notifications

    @property
    def feedback(self):
        if self._feedback is None:
            self._feedback = FeedbackContext(
                self._domain,
                account_sid=self._instance_kwargs['account_sid'],
                call_sid=self._instance_kwargs['sid'],
            )
        return self._feedback


class CallInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid, sid=None):
        super(CallInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._annotation = payload['annotation']
        self._answered_by = payload['answered_by']
        self._api_version = payload['api_version']
        self._caller_name = payload['caller_name']
        self._date_created = deserialize.iso8601_datetime(payload['date_created'])
        self._date_updated = deserialize.iso8601_datetime(payload['date_updated'])
        self._direction = payload['direction']
        self._duration = payload['duration']
        self._end_time = deserialize.iso8601_datetime(payload['end_time'])
        self._forwarded_from = payload['forwarded_from']
        self._from_ = payload['from_']
        self._from_formatted = payload['from_formatted']
        self._group_sid = payload['group_sid']
        self._parent_call_sid = payload['parent_call_sid']
        self._phone_number_sid = payload['phone_number_sid']
        self._price = payload['price']
        self._price_unit = payload['price_unit']
        self._sid = payload['sid']
        self._start_time = deserialize.iso8601_datetime(payload['start_time'])
        self._status = payload['status']
        self._subresource_uris = payload['subresource_uris']
        self._to = payload['to']
        self._to_formatted = payload['to_formatted']
        self._uri = payload['uri']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid
        self._context_sid = sid or self._sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = CallContext(
                self._domain,
                self._context_account_sid,
                self._context_sid,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The unique id of the Account responsible for creating this Call """
        return self._account_sid

    @property
    def annotation(self):
        """ The annotation provided for the Call """
        return self._annotation

    @property
    def answered_by(self):
        """ If this call was initiated with answering machine detection, either `human` or `machine`. Empty otherwise. """
        return self._answered_by

    @property
    def api_version(self):
        """ The API Version the Call was created through """
        return self._api_version

    @property
    def caller_name(self):
        """ If this call was an incoming call to a phone number with Caller ID Lookup enabled, the caller's name. Empty otherwise. """
        return self._caller_name

    @property
    def date_created(self):
        """ The date that this resource was created """
        return self._date_created

    @property
    def date_updated(self):
        """ The date that this resource was last updated """
        return self._date_updated

    @property
    def direction(self):
        """ A string describing the direction of the call. `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `<Dial>` verb. """
        return self._direction

    @property
    def duration(self):
        """ The duration """
        return self._duration

    @property
    def end_time(self):
        """ The end time of the Call. Null if the call did not complete successfully. """
        return self._end_time

    @property
    def forwarded_from(self):
        """ If this Call was an incoming call forwarded from another number, the forwarding phone number (depends on carrier supporting forwarding). Empty otherwise. """
        return self._forwarded_from

    @property
    def from_(self):
        """ The phone number, SIP address or Client identifier that made this Call. Phone numbers are in E.164 format (e.g. +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`. """
        return self._from_

    @property
    def from_formatted(self):
        """ The phone number, SIP address or Client identifier that made this Call. Formatted for display. """
        return self._from_formatted

    @property
    def group_sid(self):
        """ A 34 character Group Sid associated with this Call. Empty if no Group is associated with the Call. """
        return self._group_sid

    @property
    def parent_call_sid(self):
        """ A 34 character string that uniquely identifies the Call that created this leg. """
        return self._parent_call_sid

    @property
    def phone_number_sid(self):
        """ If the call was inbound, this is the Sid of the IncomingPhoneNumber that received the call. If the call was outbound, it is the Sid of the OutgoingCallerId from which the call was placed. """
        return self._phone_number_sid

    @property
    def price(self):
        """ The charge for this call, in the currency associated with the account. Populated after the call is completed. May not be immediately available. """
        return self._price

    @property
    def price_unit(self):
        """ The currency in which `Price` is measured. """
        return self._price_unit

    @property
    def sid(self):
        """ A 34 character string that uniquely identifies this resource. """
        return self._sid

    @property
    def start_time(self):
        """ The start time of the Call. Null if the call has not yet been dialed. """
        return self._start_time

    @property
    def status(self):
        """ The status """
        return self._status

    @property
    def subresource_uris(self):
        """ Call Instance Subresources """
        return self._subresource_uris

    @property
    def to(self):
        """ The phone number, SIP address or Client identifier that received this Call. Phone numbers are in E.164 format (e.g. +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`. """
        return self._to

    @property
    def to_formatted(self):
        """ The phone number, SIP address or Client identifier that received this Call. Formatted for display. """
        return self._to_formatted

    @property
    def uri(self):
        """ The URI for this resource, relative to `https://api.twilio.com` """
        return self._uri

    def delete(self):
        self._context.delete()

    def fetch(self):
        self._context.fetch()

    def update(self, url=values.unset, method=values.unset, status=values.unset,
               fallback_url=values.unset, fallback_method=values.unset,
               status_callback=values.unset, status_callback_method=values.unset):
        self._context.update(
            url=url,
            method=method,
            status=status,
            fallback_url=fallback_url,
            fallback_method=fallback_method,
            status_callback=status_callback,
            status_callback_method=status_callback_method,
        )
