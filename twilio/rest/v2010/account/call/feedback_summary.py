# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest import serialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class FeedbackSummaryList(ListResource):

    def __init__(self, domain, account_sid):
        super(FeedbackSummaryList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/FeedbackSummary.json".format(**self._instance_kwargs)

    def create(self, start_date, end_date, include_subaccounts=values.unset,
               status_callback=values.unset, status_callback_method=values.unset):
        data = values.of({
            "StartDate": serialize.iso8601_date(start_date),
            "EndDate": serialize.iso8601_date(end_date),
            "IncludeSubaccounts": include_subaccounts,
            "StatusCallback": status_callback,
            "StatusCallbackMethod": status_callback_method,
        })
        
        return self._domain.create(
            FeedbackSummaryInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )


class FeedbackSummaryContext(InstanceContext):

    def __init__(self, domain, account_sid, sid):
        super(FeedbackSummaryContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/FeedbackSummary/{sid}.json".format(**self._instance_kwargs)

    def fetch(self):
        params = values.of({})
        
        return self._domain.fetch(
            FeedbackSummaryInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def delete(self):
        return self._domain.delete("delete", self._uri)


class FeedbackSummaryInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid, sid=None):
        super(FeedbackSummaryInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._call_count = payload['call_count']
        self._call_feedback_count = payload['call_feedback_count']
        self._date_created = deserialize.iso8601_datetime(payload['date_created'])
        self._date_updated = deserialize.iso8601_datetime(payload['date_updated'])
        self._end_date = deserialize.iso8601_datetime(payload['end_date'])
        self._include_subaccounts = payload['include_subaccounts']
        self._issues = payload['issues']
        self._quality_score_average = payload['quality_score_average']
        self._quality_score_median = payload['quality_score_median']
        self._quality_score_standard_deviation = payload['quality_score_standard_deviation']
        self._sid = payload['sid']
        self._start_date = deserialize.iso8601_datetime(payload['start_date'])
        self._status = payload['status']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid
        self._context_sid = sid or self._sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = FeedbackSummaryContext(
                self._domain,
                self._context_account_sid,
                self._context_sid,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._account_sid

    @property
    def call_count(self):
        """ The call_count """
        return self._call_count

    @property
    def call_feedback_count(self):
        """ The call_feedback_count """
        return self._call_feedback_count

    @property
    def date_created(self):
        """ The date_created """
        return self._date_created

    @property
    def date_updated(self):
        """ The date_updated """
        return self._date_updated

    @property
    def end_date(self):
        """ The end_date """
        return self._end_date

    @property
    def include_subaccounts(self):
        """ The include_subaccounts """
        return self._include_subaccounts

    @property
    def issues(self):
        """ The issues """
        return self._issues

    @property
    def quality_score_average(self):
        """ The quality_score_average """
        return self._quality_score_average

    @property
    def quality_score_median(self):
        """ The quality_score_median """
        return self._quality_score_median

    @property
    def quality_score_standard_deviation(self):
        """ The quality_score_standard_deviation """
        return self._quality_score_standard_deviation

    @property
    def sid(self):
        """ The sid """
        return self._sid

    @property
    def start_date(self):
        """ The start_date """
        return self._start_date

    @property
    def status(self):
        """ The status """
        return self._status

    def fetch(self):
        self._context.fetch()

    def delete(self):
        self._context.delete()
