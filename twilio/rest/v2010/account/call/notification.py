# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest import serialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class NotificationList(ListResource):

    def __init__(self, domain, account_sid, call_sid):
        super(NotificationList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'call_sid': call_sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/{call_sid}/Notifications".format(**self._instance_kwargs)

    def read(self, log=values.unset, message_date=values.unset, limit=None,
             page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({
            "Log": log,
            "MessageDate": serialize.iso8601_date(message_date),
        })
        params.update(kwargs)
        
        return self._domain.read(
            self,
            NotificationInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, log=values.unset, message_date=values.unset, page_token=None,
             page=None, page_size=None, **kwargs):
        params = values.of({
            "Log": log,
        })
        params.update(kwargs)
        
        return self._domain.page(
            self,
            NotificationInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )


class NotificationContext(InstanceContext):

    def __init__(self, domain, account_sid, call_sid, sid):
        super(NotificationContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'call_sid': call_sid,
            'sid': sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/{call_sid}/Notifications/{sid}.json".format(**self._instance_kwargs)

    def fetch(self):
        return self._domain.fetch(
            NotificationInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
        )

    def delete(self):
        return self._domain.delete("delete", self._uri)


class NotificationInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid, call_sid, sid=None):
        super(NotificationInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._api_version = payload['api_version']
        self._call_sid = payload['call_sid']
        self._date_created = deserialize.iso8601_datetime(payload['date_created'])
        self._date_updated = deserialize.iso8601_datetime(payload['date_updated'])
        self._error_code = payload['error_code']
        self._log = payload['log']
        self._message_date = deserialize.iso8601_datetime(payload['message_date'])
        self._message_text = payload['message_text']
        self._more_info = payload['more_info']
        self._request_method = payload['request_method']
        self._request_url = payload['request_url']
        self._request_variables = payload['request_variables']
        self._response_body = payload['response_body']
        self._response_headers = payload['response_headers']
        self._sid = payload['sid']
        self._uri = payload['uri']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid
        self._context_call_sid = call_sid
        self._context_sid = sid or self._sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = NotificationContext(
                self._domain,
                self._context_account_sid,
                self._context_call_sid,
                self._context_sid,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._account_sid

    @property
    def api_version(self):
        """ The api_version """
        return self._api_version

    @property
    def call_sid(self):
        """ The call_sid """
        return self._call_sid

    @property
    def date_created(self):
        """ The date_created """
        return self._date_created

    @property
    def date_updated(self):
        """ The date_updated """
        return self._date_updated

    @property
    def error_code(self):
        """ The error_code """
        return self._error_code

    @property
    def log(self):
        """ The log """
        return self._log

    @property
    def message_date(self):
        """ The message_date """
        return self._message_date

    @property
    def message_text(self):
        """ The message_text """
        return self._message_text

    @property
    def more_info(self):
        """ The more_info """
        return self._more_info

    @property
    def request_method(self):
        """ The request_method """
        return self._request_method

    @property
    def request_url(self):
        """ The request_url """
        return self._request_url

    @property
    def request_variables(self):
        """ The request_variables """
        return self._request_variables

    @property
    def response_body(self):
        """ The response_body """
        return self._response_body

    @property
    def response_headers(self):
        """ The response_headers """
        return self._response_headers

    @property
    def sid(self):
        """ The sid """
        return self._sid

    @property
    def uri(self):
        """ The uri """
        return self._uri

    def fetch(self):
        self._context.fetch()

    def delete(self):
        self._context.delete()
