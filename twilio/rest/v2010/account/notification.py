# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio.rest.resources.util import (
    parse_date,
    parse_iso_date,
)
from twilio.rest.resources.base import InstanceResource
from twilio.rest.resources.base import ListResource


class Notification(InstanceResource):
    """
    .. attribute:: account_sid
    
        The unique id of the Account responsible for this notification.
    
    .. attribute:: api_version
    
        The version of the Twilio in use when this notification was generated. 
        May be empty for events that don't have a specific API version, like
        incoming phone calls.
    
    .. attribute:: call_sid
    
        CallSid is the unique id of the call during which the notification was
        generated. Empty if the notification was generated by the REST API
        without regard to a specific phone call.
    
    .. attribute:: date_created
    
        The date that this resource was created, given in RFC 2822 format.
    
    .. attribute:: date_updated
    
        The date that this resource was last updated, given in RFC 2822 format.
    
    .. attribute:: error_code
    
        A unique error code for the error condition. You can lookup errors, with
        possible causes and solutions, in our Error Dictionary.
    
    .. attribute:: log
    
        An integer log level corresponding to the type of notification: `0` is
        `ERROR`, `1` is `WARNING`.
    
    .. attribute:: message_date
    
        The date the notification was actually generated, given in RFC 2822
        format. Due to buffering, this may be slightly different than the
        DateCreated date.
    
    .. attribute:: message_text
    
        The text of the notification.
    
    .. attribute:: more_info
    
        A URL for more information about the error condition. The URL is a page
        in our Error Dictionary.
    
    .. attribute:: request_method
    
        The HTTP method in use for the request that generated the notification.
    
    .. attribute:: request_url
    
        The URL of the resource that generated the notification.
    
    .. attribute:: request_variables
    
        The Twilio-generated HTTP GET or POST variables sent to your server.
        Alternatively, if the notification was generated by the REST API, this
        field will include any HTTP POST or PUT variables you sent to the REST
        API.
    
    .. attribute:: response_body
    
        The HTTP body returned by your server.
    
    .. attribute:: response_headers
    
        The HTTP headers returned by your server.
    
    .. attribute:: sid
    
        A 34 character string that uniquely identifies this resource.
    
    .. attribute:: uri
    
        he URI for this resource, relative to `https://api.twilio.com`
    """
    id_key = "sid"

    def load(self, *args, **kwargs):
        super(Notification, self).load(*args, **kwargs)
        
        if hasattr(self, "date_created") and self.date_created:
            self.date_created = parse_iso_date(self.date_created)
        
        if hasattr(self, "date_updated") and self.date_updated:
            self.date_updated = parse_iso_date(self.date_updated)
        
        if hasattr(self, "message_date") and self.message_date:
            self.message_date = parse_iso_date(self.message_date)

    def delete(self):
        """
        Delete a notification identified by the NotificationSid from an accounts log
        
        :raises TwilioRestException: when the request fails on execute
        
        :rtype: :class:`DeleteQuery`
        :returns: A DeleteQuery when executed returns True iff the deletion is successful
        """
        return self.delete_instance()


class Notifications(ListResource):
    name = "Notifications"
    mount_name = "notifications"
    key = "notifications"
    instance = Notification

    def __init__(self, *args, **kwargs):
        super(Notifications, self).__init__(*args, **kwargs)

    def get(self, sid):
        """
        Fetch a notification belonging to the account used to make the request
        
        :param str sid: The notification Sid that uniquely identifies this resource
        
        :raises TwilioRestException: when the request fails on execute
        
        :rtype: :class:`Notification`
        :returns: A placeholder for a :class:`Notification` resource
        """
        return self.get_instance(sid)

    def delete(self, sid):
        """
        Delete a notification identified by the NotificationSid from an accounts log
        
        :param str sid: The notification Sid that uniquely identifies this resource
        
        :raises TwilioRestException: when the request fails on execute
        
        :rtype: :class:`DeleteQuery`
        :returns: A DeleteQuery when executed returns True iff the deletion is successful
        """
        return self.delete_instance(sid)

    def list(self, **kwargs):
        """
        Retrieve a list of notifications belonging to the account used to make the request
        
        :param date message_date: Only show notifications for this date. Should be
            formatted as YYYY-MM-DD. You can also specify inequalities.
        :param date message_date_after: The message_date>
        :param date message_date_before: The message_date<
        :param str log: Only show notifications for this log level
        
        :raises TwilioRestException: when the request fails on execute
        
        :rtype: :class:`ListQuery`
        :returns: A ListQuery when executed returns a list of :class:`Notification`
        """
        if "message_date_before" in kwargs:
            kwargs["MessageDate<"] = parse_date(kwargs["message_date_before"])
            del kwargs["message_date_before"]
        if "message_date_after" in kwargs:
            kwargs["MessageDate>"] = parse_date(kwargs["message_date_after"])
            del kwargs["message_date_after"]
        if "message_date" in kwargs:
            kwargs["MessageDate"] = parse_date(kwargs["message_date"])
            del kwargs["message_date"]
        return self.get_instances(kwargs)

    def iter(self, **kwargs):
        """
        Retrieve a list of notifications belonging to the account used to make the request
        
        :param date message_date: Only show notifications for this date. Should be
            formatted as YYYY-MM-DD. You can also specify inequalities.
        :param date message_date_after: The message_date>
        :param date message_date_before: The message_date<
        :param str log: Only show notifications for this log level
        
        :raises TwilioRestException: when the request fails on execute
        
        :returns: An iterator to fetch all :class:`Notification`
        """
        if "message_date_before" in kwargs:
            kwargs["MessageDate<"] = parse_date(kwargs["message_date_before"])
            del kwargs["message_date_before"]
        if "message_date_after" in kwargs:
            kwargs["MessageDate>"] = parse_date(kwargs["message_date_after"])
            del kwargs["message_date_after"]
        if "message_date" in kwargs:
            kwargs["MessageDate"] = parse_date(kwargs["message_date"])
            del kwargs["message_date"]
        return super(Notifications, self).iter(**kwargs)
