# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class ShortCodeList(ListResource):

    def __init__(self, domain, account_sid):
        super(ShortCodeList, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/SMS/ShortCodes".format(**self._instance_kwargs)

    def read(self, friendly_name=values.unset, short_code=values.unset, limit=None,
             page_size=None, **kwargs):
        limits = self._domain.read_limits(limit, page_size)
        
        params = values.of({
            "FriendlyName": friendly_name,
            "ShortCode": short_code,
        })
        params.update(kwargs)
        
        return self._domain.read(
            self,
            ShortCodeInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, friendly_name=values.unset, short_code=values.unset,
             page_token=None, page_number=None, page_size=None, **kwargs):
        params = values.of({
            "FriendlyName": friendly_name,
            "ShortCode": short_code,
            "PageToken": page_token,
            "Page": page_number,
            "PageSize": page_size,
        })
        params.update(kwargs)
        
        return self._domain.page(
            self,
            ShortCodeInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )


class ShortCodeContext(InstanceContext):

    def __init__(self, domain, account_sid, sid):
        super(ShortCodeContext, self).__init__(domain)
        
        # Path Solution
        self._instance_kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = "/Accounts/{account_sid}/SMS/ShortCodes/{sid}.json".format(**self._instance_kwargs)

    def fetch(self):
        params = values.of({})
        
        return self._domain.fetch(
            ShortCodeInstance,
            self._instance_kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def update(self, friendly_name=values.unset, api_version=values.unset,
               sms_url=values.unset, sms_method=values.unset,
               sms_fallback_url=values.unset, sms_fallback_method=values.unset):
        data = values.of({
            "FriendlyName": friendly_name,
            "ApiVersion": api_version,
            "SmsUrl": sms_url,
            "SmsMethod": sms_method,
            "SmsFallbackUrl": sms_fallback_url,
            "SmsFallbackMethod": sms_fallback_method,
        })
        
        return self._domain.update(
            ShortCodeInstance,
            self._instance_kwargs,
            'POST',
            self._uri,
            data=data,
        )


class ShortCodeInstance(InstanceResource):

    def __init__(self, domain, payload, account_sid, sid=None):
        super(ShortCodeInstance, self).__init__(domain)
        
        # Marshaled Properties
        self._account_sid = payload['account_sid']
        self._api_version = payload['api_version']
        self._date_created = deserialize.iso8601_datetime(payload['date_created'])
        self._date_updated = deserialize.iso8601_datetime(payload['date_updated'])
        self._friendly_name = payload['friendly_name']
        self._short_code = payload['short_code']
        self._sid = payload['sid']
        self._sms_fallback_method = payload['sms_fallback_method']
        self._sms_fallback_url = payload['sms_fallback_url']
        self._sms_method = payload['sms_method']
        self._sms_url = payload['sms_url']
        self._uri = payload['uri']
        
        # Context
        self._lazy_context = None
        self._context_account_sid = account_sid
        self._context_sid = sid or self._sid

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = ShortCodeContext(
                self._domain,
                self._context_account_sid,
                self._context_sid,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The unique sid that identifies this account """
        return self._account_sid

    @property
    def api_version(self):
        """ The API version to use """
        return self._api_version

    @property
    def date_created(self):
        """ The date this resource was created """
        return self._date_created

    @property
    def date_updated(self):
        """ The date this resource was last updated """
        return self._date_updated

    @property
    def friendly_name(self):
        """ A human readable description of this resource """
        return self._friendly_name

    @property
    def short_code(self):
        """ The short code. e.g., 894546. """
        return self._short_code

    @property
    def sid(self):
        """ A string that uniquely identifies this short-codes """
        return self._sid

    @property
    def sms_fallback_method(self):
        """ HTTP method Twilio will use with sms fallback url """
        return self._sms_fallback_method

    @property
    def sms_fallback_url(self):
        """ URL Twilio will request if an error occurs in executing TwiML """
        return self._sms_fallback_url

    @property
    def sms_method(self):
        """ HTTP method to use when requesting the sms url """
        return self._sms_method

    @property
    def sms_url(self):
        """ URL Twilio will request when receiving an SMS """
        return self._sms_url

    @property
    def uri(self):
        """ The URI for this resource """
        return self._uri

    def fetch(self):
        self._context.fetch()

    def update(self, friendly_name=values.unset, api_version=values.unset,
               sms_url=values.unset, sms_method=values.unset,
               sms_fallback_url=values.unset, sms_fallback_method=values.unset):
        self._context.update(
            friendly_name=friendly_name,
            api_version=api_version,
            sms_url=sms_url,
            sms_method=sms_method,
            sms_fallback_url=sms_fallback_url,
            sms_fallback_method=sms_fallback_method,
        )
