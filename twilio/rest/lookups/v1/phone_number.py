# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource


class PhoneNumberContext(InstanceContext):

    def __init__(self, version, phone_number):
        super(PhoneNumberContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'phone_number': phone_number,
        }
        self._uri = '/PhoneNumbers/{phone_number}'.format(**self._kwargs)

    def fetch(self, country_code=values.unset, type=values.unset):
        params = values.of({
            'CountryCode': country_code,
            'Type': type,
        })
        
        return self._version.fetch(
            PhoneNumberInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )


class PhoneNumberInstance(InstanceResource):

    def __init__(self, version, payload, phone_number=None):
        super(PhoneNumberInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'country_code': payload['country_code'],
            'phone_number': payload['phone_number'],
            'national_format': payload['national_format'],
            'mobile_country_code': payload['mobile_country_code'],
            'mobile_network_code': payload['mobile_network_code'],
            'name': payload['name'],
            'type': payload['type'],
            'carrier': payload['carrier'],
        }
        
        # Context
        self._lazy_context = None
        self._context_properties = {
            'phone_number': phone_number or self._properties['phone_number'],
        }

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = PhoneNumberContext(
                self._version,
                self._context_properties['phone_number'],
            )
        return self._lazy_context

    @property
    def country_code(self):
        """ The country_code """
        return self._properties['country_code']

    @property
    def phone_number(self):
        """ The phone_number """
        return self._properties['phone_number']

    @property
    def national_format(self):
        """ The national_format """
        return self._properties['national_format']

    @property
    def mobile_country_code(self):
        """ The mobile_country_code """
        return self._properties['mobile_country_code']

    @property
    def mobile_network_code(self):
        """ The mobile_network_code """
        return self._properties['mobile_network_code']

    @property
    def name(self):
        """ The name """
        return self._properties['name']

    @property
    def type(self):
        """ The type """
        return self._properties['type']

    @property
    def carrier(self):
        """ The carrier """
        return self._properties['carrier']

    def fetch(self, country_code=values.unset, type=values.unset):
        self._context.fetch(
            country_code=country_code,
            type=type,
        )
