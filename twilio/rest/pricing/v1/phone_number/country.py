# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class CountryList(ListResource):

    def __init__(self, version):
        """
        Initialize the CountryList
        
        :param Version version: Version that contains the resource
        
        :returns: CountryList
        :rtype: CountryList
        """
        super(CountryList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {}
        self._uri = '/PhoneNumbers/Countries'.format(**self._kwargs)

    def read(self, limit=None, page_size=None, **kwargs):
        limits = self._version.read_limits(limit, page_size)
        
        params = values.of({
            'PageSize': limits['page_size'],
        })
        params.update(kwargs)
        
        return self._version.read(
            self,
            CountryInstance,
            self._kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, page_token=None, page_number=None, page_size=None, **kwargs):
        params = values.of({
            "PageToken": page_token,
            "Page": page_number,
            "PageSize": page_size,
        })
        params.update(kwargs)
        
        return self._version.page(
            self,
            CountryInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def __call__(self, iso_country):
        """
        Constructs a CountryContext
        
        :param iso_country: Contextual iso_country
        
        :returns: CountryContext
        :rtype: CountryContext
        """
        return CountryContext(self._version, iso_country=iso_country, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Pricing.V1.CountryList>'


class CountryContext(InstanceContext):

    def __init__(self, version, iso_country):
        super(CountryContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'iso_country': iso_country,
        }
        self._uri = "/PhoneNumbers/Countries/{iso_country}".format(**self._kwargs)

    def fetch(self):
        params = values.of({})
        
        return self._version.fetch(
            CountryInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )


class CountryInstance(InstanceResource):

    def __init__(self, version, payload, iso_country=None):
        super(CountryInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'country': payload['country'],
            'iso_country': payload['iso_country'],
            'url': payload['url'],
        }
        
        # Context
        self._lazy_context = None
        self._context_properties = {
            'iso_country': iso_country or self._properties['iso_country'],
        }

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = CountryContext(
                self._version,
                self._context_properties['iso_country'],
            )
        return self._lazy_context

    @property
    def country(self):
        """ The country """
        return self._properties['country']

    @property
    def iso_country(self):
        """ The iso_country """
        return self._properties['iso_country']

    @property
    def url(self):
        """ The url """
        return self._properties['url']

    def fetch(self):
        self._context.fetch()
