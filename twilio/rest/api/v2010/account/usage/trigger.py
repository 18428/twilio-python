# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class TriggerList(ListResource):

    def __init__(self, version, account_sid):
        """
        Initialize the TriggerList
        
        :param Version version: Version that contains the resource
        :param account_sid: Contextual account_sid
        
        :returns: TriggerList
        :rtype: TriggerList
        """
        super(TriggerList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
        }
        self._uri = '/Accounts/{account_sid}/Usage/Triggers.json'.format(**self._kwargs)

    def create(self, callback_url, trigger_value, usage_category,
               callback_method=values.unset, friendly_name=values.unset,
               recurring=values.unset, trigger_by=values.unset):
        data = values.of({
            'CallbackUrl': callback_url,
            'TriggerValue': trigger_value,
            'UsageCategory': usage_category,
            'CallbackMethod': callback_method,
            'FriendlyName': friendly_name,
            'Recurring': recurring,
            'TriggerBy': trigger_by,
        })
        
        return self._version.create(
            TriggerInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def read(self, recurring=values.unset, trigger_by=values.unset,
             usage_category=values.unset, limit=None, page_size=None, **kwargs):
        limits = self._version.read_limits(limit, page_size)
        
        params = values.of({
            'Recurring': recurring,
            'TriggerBy': trigger_by,
            'UsageCategory': usage_category,
            'PageSize': limits['page_size'],
        })
        params.update(kwargs)
        
        return self._version.read(
            self,
            TriggerInstance,
            self._kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, recurring=values.unset, trigger_by=values.unset,
             usage_category=values.unset, page_token=None, page_number=None,
             page_size=None, **kwargs):
        params = values.of({
            'Recurring': recurring,
            'TriggerBy': trigger_by,
            'UsageCategory': usage_category,
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })
        params.update(kwargs)
        
        return self._version.page(
            self,
            TriggerInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def __call__(self, sid):
        """
        Constructs a TriggerContext
        
        :param sid: Contextual sid
        
        :returns: TriggerContext
        :rtype: TriggerContext
        """
        return TriggerContext(self._version, sid=sid, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.TriggerList>'


class TriggerContext(InstanceContext):

    def __init__(self, version, account_sid, sid):
        """
        Initialize the TriggerContext
        
        :param Version version
        :param account_sid: Contextual account_sid
        :param sid: Contextual sid
        
        :returns: TriggerContext
        :rtype: TriggerContext
        """
        super(TriggerContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = '/Accounts/{account_sid}/Usage/Triggers/{sid}.json'.format(**self._kwargs)

    def fetch(self):
        params = values.of({})
        
        return self._version.fetch(
            TriggerInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def update(self, callback_method=values.unset, callback_url=values.unset,
               friendly_name=values.unset):
        data = values.of({
            'CallbackMethod': callback_method,
            'CallbackUrl': callback_url,
            'FriendlyName': friendly_name,
        })
        
        return self._version.update(
            TriggerInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def delete(self):
        return self._version.delete('delete', self._uri)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Api.V2010.TriggerContext {}>'.format(context)


class TriggerInstance(InstanceResource):

    def __init__(self, version, payload, account_sid, sid=None):
        """
        Initialize the TriggerInstance
        
        :returns: TriggerInstance
        :rtype: TriggerInstance
        """
        super(TriggerInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'api_version': payload['api_version'],
            'callback_method': payload['callback_method'],
            'callback_url': payload['callback_url'],
            'current_value': payload['current_value'],
            'date_created': deserialize.rfc2822_datetime(payload['date_created']),
            'date_fired': deserialize.rfc2822_datetime(payload['date_fired']),
            'date_updated': deserialize.rfc2822_datetime(payload['date_updated']),
            'friendly_name': payload['friendly_name'],
            'recurring': payload['recurring'],
            'sid': payload['sid'],
            'trigger_by': payload['trigger_by'],
            'trigger_value': payload['trigger_value'],
            'uri': payload['uri'],
            'usage_category': payload['usage_category'],
            'usage_record_uri': payload['usage_record_uri'],
        }
        
        # Context
        self._instance_context = None
        self._kwargs = {
            'account_sid': account_sid,
            'sid': sid or self._properties['sid'],
        }

    @property
    def _context(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context
        
        :returns: TriggerContext for this TriggerInstance
        :rtype: TriggerContext
        """
        if self._instance_context is None:
            self._instance_context = TriggerContext(
                self._version,
                self._kwargs['account_sid'],
                self._kwargs['sid'],
            )
        return self._instance_context

    @property
    def account_sid(self):
        """
        :returns: The account this trigger monitors.
        :rtype: str
        """
        return self._properties['account_sid']

    @property
    def api_version(self):
        """
        :returns: The api_version
        :rtype: str
        """
        return self._properties['api_version']

    @property
    def callback_method(self):
        """
        :returns: HTTP method to use with callback_url
        :rtype: str
        """
        return self._properties['callback_method']

    @property
    def callback_url(self):
        """
        :returns: URL Twilio will request when the trigger fires
        :rtype: str
        """
        return self._properties['callback_url']

    @property
    def current_value(self):
        """
        :returns: The current value of the field the trigger is watching.
        :rtype: str
        """
        return self._properties['current_value']

    @property
    def date_created(self):
        """
        :returns: The date this resource was created
        :rtype: datetime
        """
        return self._properties['date_created']

    @property
    def date_fired(self):
        """
        :returns: The date the trigger was last fired
        :rtype: datetime
        """
        return self._properties['date_fired']

    @property
    def date_updated(self):
        """
        :returns: The date this resource was last updated
        :rtype: datetime
        """
        return self._properties['date_updated']

    @property
    def friendly_name(self):
        """
        :returns: A user-specified, human-readable name for the trigger.
        :rtype: str
        """
        return self._properties['friendly_name']

    @property
    def recurring(self):
        """
        :returns: How this trigger recurs
        :rtype: trigger.recurring
        """
        return self._properties['recurring']

    @property
    def sid(self):
        """
        :returns: The trigger's unique Sid
        :rtype: str
        """
        return self._properties['sid']

    @property
    def trigger_by(self):
        """
        :returns: The field in the UsageRecord that fires the trigger
        :rtype: trigger.trigger_field
        """
        return self._properties['trigger_by']

    @property
    def trigger_value(self):
        """
        :returns: the value at which the trigger will fire
        :rtype: str
        """
        return self._properties['trigger_value']

    @property
    def uri(self):
        """
        :returns: The URI for this resource
        :rtype: str
        """
        return self._properties['uri']

    @property
    def usage_category(self):
        """
        :returns: The usage category the trigger watches
        :rtype: trigger.usage_category
        """
        return self._properties['usage_category']

    @property
    def usage_record_uri(self):
        """
        :returns: The URI of the UsageRecord this trigger is watching
        :rtype: str
        """
        return self._properties['usage_record_uri']

    def fetch(self):
        self._context.fetch()

    def update(self, callback_method=values.unset, callback_url=values.unset,
               friendly_name=values.unset):
        self._context.update(
            callback_method=callback_method,
            callback_url=callback_url,
            friendly_name=friendly_name,
        )

    def delete(self):
        self._context.delete()

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Api.V2010.TriggerInstance {}>'.format(context)
