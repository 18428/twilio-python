# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class AuthorizedConnectAppList(ListResource):

    def __init__(self, version, account_sid):
        """
        Initialize the AuthorizedConnectAppList
        
        :param Version version: Version that contains the resource
        :param account_sid: Contextual account_sid
        
        :returns: AuthorizedConnectAppList
        :rtype: AuthorizedConnectAppList
        """
        super(AuthorizedConnectAppList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
        }
        self._uri = '/Accounts/{account_sid}/AuthorizedConnectApps.json'.format(**self._kwargs)

    def read(self, limit=None, page_size=None, **kwargs):
        limits = self._version.read_limits(limit, page_size)
        
        params = values.of({
            'PageSize': limits['page_size'],
        })
        params.update(kwargs)
        
        return self._version.read(
            self,
            AuthorizedConnectAppInstance,
            self._kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, page_token=None, page_number=None, page_size=None, **kwargs):
        params = values.of({
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })
        params.update(kwargs)
        
        return self._version.page(
            self,
            AuthorizedConnectAppInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def __call__(self, sid):
        """
        Constructs a AuthorizedConnectAppContext
        
        :param sid: Contextual sid
        
        :returns: AuthorizedConnectAppContext
        :rtype: AuthorizedConnectAppContext
        """
        return AuthorizedConnectAppContext(self._version, sid=sid, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.AuthorizedConnectAppList>'


class AuthorizedConnectAppContext(InstanceContext):

    def __init__(self, version, account_sid, sid):
        """
        Initialize the AuthorizedConnectAppContext
        
        :param Version version
        :param account_sid: Contextual account_sid
        :param sid: Contextual sid
        
        :returns: AuthorizedConnectAppContext
        :rtype: AuthorizedConnectAppContext
        """
        super(AuthorizedConnectAppContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = '/Accounts/{account_sid}/AuthorizedConnectApps/{sid}.json'.format(**self._kwargs)

    def fetch(self):
        params = values.of({})
        
        return self._version.fetch(
            AuthorizedConnectAppInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Api.V2010.AuthorizedConnectAppContext {}>'.format(context)


class AuthorizedConnectAppInstance(InstanceResource):

    def __init__(self, version, payload, account_sid, sid=None):
        """
        Initialize the AuthorizedConnectAppInstance
        
        :returns: AuthorizedConnectAppInstance
        :rtype: AuthorizedConnectAppInstance
        """
        super(AuthorizedConnectAppInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'connect_app_company_name': payload['connect_app_company_name'],
            'connect_app_description': payload['connect_app_description'],
            'connect_app_friendly_name': payload['connect_app_friendly_name'],
            'connect_app_homepage_url': payload['connect_app_homepage_url'],
            'connect_app_sid': payload['connect_app_sid'],
            'date_created': deserialize.rfc2822_datetime(payload['date_created']),
            'date_updated': deserialize.rfc2822_datetime(payload['date_updated']),
            'permissions': payload['permissions'],
            'uri': payload['uri'],
        }
        
        # Context
        self._instance_context = None
        self._kwargs = {
            'account_sid': account_sid,
            'sid': sid or self._properties['sid'],
        }

    @property
    def _context(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context
        
        :returns: AuthorizedConnectAppContext for this AuthorizedConnectAppInstance
        :rtype: AuthorizedConnectAppContext
        """
        if self._instance_context is None:
            self._instance_context = AuthorizedConnectAppContext(
                self._version,
                self._kwargs['account_sid'],
                self._kwargs['sid'],
            )
        return self._instance_context

    @property
    def account_sid(self):
        """
        :returns: The unique sid that identifies this account
        :rtype: str
        """
        return self._properties['account_sid']

    @property
    def connect_app_company_name(self):
        """
        :returns: The company name set for this Connect App.
        :rtype: str
        """
        return self._properties['connect_app_company_name']

    @property
    def connect_app_description(self):
        """
        :returns: Human readable description of the app
        :rtype: str
        """
        return self._properties['connect_app_description']

    @property
    def connect_app_friendly_name(self):
        """
        :returns: A human readable name for the Connect App.
        :rtype: str
        """
        return self._properties['connect_app_friendly_name']

    @property
    def connect_app_homepage_url(self):
        """
        :returns: The public URL for this Connect App.
        :rtype: str
        """
        return self._properties['connect_app_homepage_url']

    @property
    def connect_app_sid(self):
        """
        :returns: A string that uniquely identifies this app
        :rtype: str
        """
        return self._properties['connect_app_sid']

    @property
    def date_created(self):
        """
        :returns: The date this resource was created
        :rtype: datetime
        """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """
        :returns: The date this resource was last updated
        :rtype: datetime
        """
        return self._properties['date_updated']

    @property
    def permissions(self):
        """
        :returns: Permissions authorized to this app
        :rtype: authorized_connect_app.permission
        """
        return self._properties['permissions']

    @property
    def uri(self):
        """
        :returns: The URI for this resource
        :rtype: str
        """
        return self._properties['uri']

    def fetch(self):
        self._context.fetch()

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Api.V2010.AuthorizedConnectAppInstance {}>'.format(context)
