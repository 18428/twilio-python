# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class TokenList(ListResource):

    def __init__(self, version, account_sid):
        """
        Initialize the TokenList
        
        :param Version version: Version that contains the resource
        :param account_sid: Contextual account_sid
        
        :returns: TokenList
        :rtype: TokenList
        """
        super(TokenList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
        }
        self._uri = '/Accounts/{account_sid}/Tokens.json'.format(**self._kwargs)

    def create(self, ttl=values.unset):
        data = values.of({
            'Ttl': ttl,
        })
        
        return self._version.create(
            TokenInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def __call__(self):
        """
        Constructs a TokenContext
        
        :returns: TokenContext
        :rtype: TokenContext
        """
        return TokenContext(self._version, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.TokenList>'


class TokenContext(InstanceContext):

    def __init__(self, version):
        """
        Initialize the TokenContext
        
        :param Version version
        
        :returns: TokenContext
        :rtype: TokenContext
        """
        super(TokenContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {}
        self._uri = 'None'.format(**self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Api.V2010.TokenContext {}>'.format(context)


class TokenInstance(InstanceResource):

    def __init__(self, version, payload, account_sid):
        super(TokenInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'date_created': deserialize.rfc2822_datetime(payload['date_created']),
            'date_updated': deserialize.rfc2822_datetime(payload['date_updated']),
            'ice_servers': payload['ice_servers'],
            'password': payload['password'],
            'ttl': payload['ttl'],
            'username': payload['username'],
        }
        
        # Context
        self._lazy_context = None
        self._context_properties = {
            'account_sid': account_sid,
        }

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = TokenContext(
                self._version,
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._properties['account_sid']

    @property
    def date_created(self):
        """ The date_created """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """ The date_updated """
        return self._properties['date_updated']

    @property
    def ice_servers(self):
        """ The ice_servers """
        return self._properties['ice_servers']

    @property
    def password(self):
        """ The password """
        return self._properties['password']

    @property
    def ttl(self):
        """ The ttl """
        return self._properties['ttl']

    @property
    def username(self):
        """ The username """
        return self._properties['username']
