# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio.rest.api.v2010.account.sip.credential_list import CredentialListList
from twilio.rest.api.v2010.account.sip.domain import DomainList
from twilio.rest.api.v2010.account.sip.ip_access_control_list import IpAccessControlListList
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class SipList(ListResource):

    def __init__(self, version, account_sid):
        """
        Initialize the SipList
        
        :param Version version: Version that contains the resource
        :param account_sid: A 34 character string that uniquely identifies this resource.
        
        :returns: SipList
        :rtype: SipList
        """
        super(SipList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
        }
        self._uri = '/Accounts/{account_sid}/SIP.json'.format(**self._kwargs)
        
        # Components
        self._domains = None
        self._ip_access_control_lists = None
        self._credential_lists = None

    @property
    def domains(self):
        """
        Access the domains
        
        :returns: DomainList
        :rtype: DomainList
        """
        if self._domains is None:
            self._domains = DomainList(self._version, **self._kwargs)
        return self._domains

    @property
    def ip_access_control_lists(self):
        """
        Access the ip_access_control_lists
        
        :returns: IpAccessControlListList
        :rtype: IpAccessControlListList
        """
        if self._ip_access_control_lists is None:
            self._ip_access_control_lists = IpAccessControlListList(self._version, **self._kwargs)
        return self._ip_access_control_lists

    @property
    def credential_lists(self):
        """
        Access the credential_lists
        
        :returns: CredentialListList
        :rtype: CredentialListList
        """
        if self._credential_lists is None:
            self._credential_lists = CredentialListList(self._version, **self._kwargs)
        return self._credential_lists

    def get(self):
        """
        Constructs a SipContext
        
        :returns: SipContext
        :rtype: SipContext
        """
        return SipContext(self._version, **self._kwargs)

    def __call__(self):
        """
        Constructs a SipContext
        
        :returns: SipContext
        :rtype: SipContext
        """
        return SipContext(self._version, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.SipList>'


class SipContext(InstanceContext):

    def __init__(self, version):
        """
        Initialize the SipContext
        
        :param Version version
        
        :returns: SipContext
        :rtype: SipContext
        """
        super(SipContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {}
        self._uri = 'None'.format(**self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Api.V2010.SipContext {}>'.format(context)


class SipInstance(InstanceResource):

    def __init__(self, version, payload, account_sid):
        """
        Initialize the SipInstance
        
        :returns: SipInstance
        :rtype: SipInstance
        """
        super(SipInstance, self).__init__(version)
        # Context
        self._instance_context = None
        self._kwargs = {
            'account_sid': account_sid,
        }

    @property
    def _context(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context
        
        :returns: SipContext for this SipInstance
        :rtype: SipContext
        """
        if self._instance_context is None:
            self._instance_context = SipContext(
                self._version,
            )
        return self._instance_context

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Api.V2010.SipInstance {}>'.format(context)
