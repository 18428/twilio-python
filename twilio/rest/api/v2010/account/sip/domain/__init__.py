# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.api.v2010.account.sip.domain.credential_list_mapping import CredentialListMappingList
from twilio.rest.api.v2010.account.sip.domain.ip_access_control_list_mapping import IpAccessControlListMappingList
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class DomainList(ListResource):

    def __init__(self, version, account_sid):
        super(DomainList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/SIP/Domains.json".format(**self._kwargs)

    def read(self, limit=None, page_size=None, **kwargs):
        limits = self._version.read_limits(limit, page_size)
        
        params = values.of({
            'PageSize': limits['page_size'],
        })
        params.update(kwargs)
        
        return self._version.read(
            self,
            DomainInstance,
            self._kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, page_token=None, page_number=None, page_size=None, **kwargs):
        params = values.of({
            "PageToken": page_token,
            "Page": page_number,
            "PageSize": page_size,
        })
        params.update(kwargs)
        
        return self._version.page(
            self,
            DomainInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def create(self, domain_name, friendly_name=values.unset,
               voice_url=values.unset, voice_method=values.unset,
               voice_fallback_url=values.unset, voice_fallback_method=values.unset,
               voice_status_callback_url=values.unset,
               voice_status_callback_method=values.unset):
        data = values.of({
            "DomainName": domain_name,
            "FriendlyName": friendly_name,
            "VoiceUrl": voice_url,
            "VoiceMethod": voice_method,
            "VoiceFallbackUrl": voice_fallback_url,
            "VoiceFallbackMethod": voice_fallback_method,
            "VoiceStatusCallbackUrl": voice_status_callback_url,
            "VoiceStatusCallbackMethod": voice_status_callback_method,
        })
        
        return self._version.create(
            DomainInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def __call__(self, sid):
        return DomainContext(self._version, sid=sid, **self._kwargs)

    def __repr__(self):
        return '<Twilio.Api.V2010.DomainList>'


class DomainContext(InstanceContext):

    def __init__(self, version, account_sid, sid):
        super(DomainContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = "/Accounts/{account_sid}/SIP/Domains/{sid}.json".format(**self._kwargs)
        
        # Dependents
        self._ip_access_control_list_mappings = None
        self._credential_list_mappings = None

    def fetch(self):
        params = values.of({})
        
        return self._version.fetch(
            DomainInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def update(self, api_version=values.unset, friendly_name=values.unset,
               voice_fallback_method=values.unset, voice_fallback_url=values.unset,
               voice_method=values.unset, voice_status_callback_method=values.unset,
               voice_status_callback_url=values.unset, voice_url=values.unset):
        data = values.of({
            "ApiVersion": api_version,
            "FriendlyName": friendly_name,
            "VoiceFallbackMethod": voice_fallback_method,
            "VoiceFallbackUrl": voice_fallback_url,
            "VoiceMethod": voice_method,
            "VoiceStatusCallbackMethod": voice_status_callback_method,
            "VoiceStatusCallbackUrl": voice_status_callback_url,
            "VoiceUrl": voice_url,
        })
        
        return self._version.update(
            DomainInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def delete(self):
        return self._version.delete("delete", self._uri)

    @property
    def ip_access_control_list_mappings(self):
        if self._ip_access_control_list_mappings is None:
            self._ip_access_control_list_mappings = IpAccessControlListMappingList(
                self._version,
                account_sid=self._kwargs['account_sid'],
                domain_sid=self._kwargs['sid'],
            )
        return self._ip_access_control_list_mappings

    @property
    def credential_list_mappings(self):
        if self._credential_list_mappings is None:
            self._credential_list_mappings = CredentialListMappingList(
                self._version,
                account_sid=self._kwargs['account_sid'],
                domain_sid=self._kwargs['sid'],
            )
        return self._credential_list_mappings


class DomainInstance(InstanceResource):

    def __init__(self, version, payload, account_sid, sid=None):
        super(DomainInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'api_version': payload['api_version'],
            'auth_type': payload['auth_type'],
            'date_created': deserialize.rfc2822_datetime(payload['date_created']),
            'date_updated': deserialize.rfc2822_datetime(payload['date_updated']),
            'domain_name': payload['domain_name'],
            'friendly_name': payload['friendly_name'],
            'sid': payload['sid'],
            'uri': payload['uri'],
            'voice_fallback_method': payload['voice_fallback_method'],
            'voice_fallback_url': payload['voice_fallback_url'],
            'voice_method': payload['voice_method'],
            'voice_status_callback_method': payload['voice_status_callback_method'],
            'voice_status_callback_url': payload['voice_status_callback_url'],
            'voice_url': payload['voice_url'],
        }
        
        # Context
        self._lazy_context = None
        self._context_properties = {
            'account_sid': account_sid,
            'sid': sid or self._properties['sid'],
        }

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = DomainContext(
                self._version,
                self._context_properties['account_sid'],
                self._context_properties['sid'],
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._properties['account_sid']

    @property
    def api_version(self):
        """ The api_version """
        return self._properties['api_version']

    @property
    def auth_type(self):
        """ The auth_type """
        return self._properties['auth_type']

    @property
    def date_created(self):
        """ The date_created """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """ The date_updated """
        return self._properties['date_updated']

    @property
    def domain_name(self):
        """ The domain_name """
        return self._properties['domain_name']

    @property
    def friendly_name(self):
        """ The friendly_name """
        return self._properties['friendly_name']

    @property
    def sid(self):
        """ The sid """
        return self._properties['sid']

    @property
    def uri(self):
        """ The uri """
        return self._properties['uri']

    @property
    def voice_fallback_method(self):
        """ The voice_fallback_method """
        return self._properties['voice_fallback_method']

    @property
    def voice_fallback_url(self):
        """ The voice_fallback_url """
        return self._properties['voice_fallback_url']

    @property
    def voice_method(self):
        """ The voice_method """
        return self._properties['voice_method']

    @property
    def voice_status_callback_method(self):
        """ The voice_status_callback_method """
        return self._properties['voice_status_callback_method']

    @property
    def voice_status_callback_url(self):
        """ The voice_status_callback_url """
        return self._properties['voice_status_callback_url']

    @property
    def voice_url(self):
        """ The voice_url """
        return self._properties['voice_url']

    def fetch(self):
        self._context.fetch()

    def update(self, api_version=values.unset, friendly_name=values.unset,
               voice_fallback_method=values.unset, voice_fallback_url=values.unset,
               voice_method=values.unset, voice_status_callback_method=values.unset,
               voice_status_callback_url=values.unset, voice_url=values.unset):
        self._context.update(
            api_version=api_version,
            friendly_name=friendly_name,
            voice_fallback_method=voice_fallback_method,
            voice_fallback_url=voice_fallback_url,
            voice_method=voice_method,
            voice_status_callback_method=voice_status_callback_method,
            voice_status_callback_url=voice_status_callback_url,
            voice_url=voice_url,
        )

    def delete(self):
        self._context.delete()

    @property
    def ip_access_control_list_mappings(self):
        return self._context.ip_access_control_list_mappings

    @property
    def credential_list_mappings(self):
        return self._context.credential_list_mappings
