# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class FeedbackSummaryList(ListResource):

    def __init__(self, version, account_sid):
        """
        Initialize the FeedbackSummaryList
        
        :param Version version: Version that contains the resource
        :param account_sid: Contextual account_sid
        
        :returns: FeedbackSummaryList
        :rtype: FeedbackSummaryList
        """
        super(FeedbackSummaryList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
        }
        self._uri = '/Accounts/{account_sid}/Calls/FeedbackSummary.json'.format(**self._kwargs)

    def create(self, start_date, end_date, include_subaccounts=values.unset,
               status_callback=values.unset, status_callback_method=values.unset):
        data = values.of({
            'StartDate': start_date,
            'EndDate': end_date,
            'IncludeSubaccounts': include_subaccounts,
            'StatusCallback': status_callback,
            'StatusCallbackMethod': status_callback_method,
        })
        
        return self._version.create(
            FeedbackSummaryInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def __call__(self, sid):
        """
        Constructs a FeedbackSummaryContext
        
        :param sid: Contextual sid
        
        :returns: FeedbackSummaryContext
        :rtype: FeedbackSummaryContext
        """
        return FeedbackSummaryContext(self._version, sid=sid, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.FeedbackSummaryList>'


class FeedbackSummaryContext(InstanceContext):

    def __init__(self, version, account_sid, sid):
        super(FeedbackSummaryContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = "/Accounts/{account_sid}/Calls/FeedbackSummary/{sid}.json".format(**self._kwargs)

    def fetch(self):
        params = values.of({})
        
        return self._version.fetch(
            FeedbackSummaryInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def delete(self):
        return self._version.delete("delete", self._uri)


class FeedbackSummaryInstance(InstanceResource):

    def __init__(self, version, payload, account_sid, sid=None):
        super(FeedbackSummaryInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'call_count': payload['call_count'],
            'call_feedback_count': payload['call_feedback_count'],
            'date_created': deserialize.rfc2822_datetime(payload['date_created']),
            'date_updated': deserialize.rfc2822_datetime(payload['date_updated']),
            'end_date': deserialize.rfc2822_datetime(payload['end_date']),
            'include_subaccounts': payload['include_subaccounts'],
            'issues': payload['issues'],
            'quality_score_average': payload['quality_score_average'],
            'quality_score_median': payload['quality_score_median'],
            'quality_score_standard_deviation': payload['quality_score_standard_deviation'],
            'sid': payload['sid'],
            'start_date': deserialize.rfc2822_datetime(payload['start_date']),
            'status': payload['status'],
        }
        
        # Context
        self._lazy_context = None
        self._context_properties = {
            'account_sid': account_sid,
            'sid': sid or self._properties['sid'],
        }

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = FeedbackSummaryContext(
                self._version,
                self._context_properties['account_sid'],
                self._context_properties['sid'],
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._properties['account_sid']

    @property
    def call_count(self):
        """ The call_count """
        return self._properties['call_count']

    @property
    def call_feedback_count(self):
        """ The call_feedback_count """
        return self._properties['call_feedback_count']

    @property
    def date_created(self):
        """ The date_created """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """ The date_updated """
        return self._properties['date_updated']

    @property
    def end_date(self):
        """ The end_date """
        return self._properties['end_date']

    @property
    def include_subaccounts(self):
        """ The include_subaccounts """
        return self._properties['include_subaccounts']

    @property
    def issues(self):
        """ The issues """
        return self._properties['issues']

    @property
    def quality_score_average(self):
        """ The quality_score_average """
        return self._properties['quality_score_average']

    @property
    def quality_score_median(self):
        """ The quality_score_median """
        return self._properties['quality_score_median']

    @property
    def quality_score_standard_deviation(self):
        """ The quality_score_standard_deviation """
        return self._properties['quality_score_standard_deviation']

    @property
    def sid(self):
        """ The sid """
        return self._properties['sid']

    @property
    def start_date(self):
        """ The start_date """
        return self._properties['start_date']

    @property
    def status(self):
        """ The status """
        return self._properties['status']

    def fetch(self):
        self._context.fetch()

    def delete(self):
        self._context.delete()
