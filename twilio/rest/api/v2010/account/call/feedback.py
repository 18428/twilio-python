# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource


class FeedbackContext(InstanceContext):

    def __init__(self, version, account_sid, call_sid):
        super(FeedbackContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
            'call_sid': call_sid,
        }
        self._uri = '/Accounts/{account_sid}/Calls/{call_sid}/Feedback.json'.format(**self._kwargs)

    def create(self, quality_score, issue=values.unset):
        data = values.of({
            'QualityScore': quality_score,
            'Issue': issue,
        })
        
        return self._version.create(
            FeedbackInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )

    def fetch(self):
        params = values.of({})
        
        return self._version.fetch(
            FeedbackInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def update(self, quality_score, issue=values.unset):
        data = values.of({
            'QualityScore': quality_score,
            'Issue': issue,
        })
        
        return self._version.update(
            FeedbackInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )


class FeedbackInstance(InstanceResource):

    def __init__(self, version, payload, account_sid=None, call_sid=None):
        super(FeedbackInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'date_created': deserialize.rfc2822_datetime(payload['date_created']),
            'date_updated': deserialize.rfc2822_datetime(payload['date_updated']),
            'issues': payload['issues'],
            'quality_score': payload['quality_score'],
            'sid': payload['sid'],
        }
        
        # Context
        self._lazy_context = None
        self._context_properties = {
            'account_sid': account_sid or self._properties['account_sid'],
            'call_sid': call_sid or self._properties['call_sid'],
        }

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = FeedbackContext(
                self._version,
                self._context_properties['account_sid'],
                self._context_properties['call_sid'],
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._properties['account_sid']

    @property
    def date_created(self):
        """ The date_created """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """ The date_updated """
        return self._properties['date_updated']

    @property
    def issues(self):
        """ The issues """
        return self._properties['issues']

    @property
    def quality_score(self):
        """ The quality_score """
        return self._properties['quality_score']

    @property
    def sid(self):
        """ The sid """
        return self._properties['sid']

    def create(self, quality_score, issue=values.unset):
        self._context.create(
            quality_score,
            issue=issue,
        )

    def fetch(self):
        self._context.fetch()

    def update(self, quality_score, issue=values.unset):
        self._context.update(
            quality_score,
            issue=issue,
        )
