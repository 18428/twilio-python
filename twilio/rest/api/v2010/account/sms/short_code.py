# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio import values
from twilio.rest import deserialize
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class ShortCodeList(ListResource):

    def __init__(self, version, account_sid):
        """
        Initialize the ShortCodeList
        
        :param Version version: Version that contains the resource
        :param account_sid: Contextual account_sid
        
        :returns: ShortCodeList
        :rtype: ShortCodeList
        """
        super(ShortCodeList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
        }
        self._uri = "/Accounts/{account_sid}/SMS/ShortCodes".format(**self._kwargs)

    def read(self, friendly_name=values.unset, short_code=values.unset, limit=None,
             page_size=None, **kwargs):
        limits = self._version.read_limits(limit, page_size)
        
        params = values.of({
            "FriendlyName": friendly_name,
            "ShortCode": short_code,
            'PageSize': limits['page_size'],
        })
        params.update(kwargs)
        
        return self._version.read(
            self,
            ShortCodeInstance,
            self._kwargs,
            'GET',
            self._uri,
            limits['limit'],
            limits['page_limit'],
            params=params,
        )

    def page(self, friendly_name=values.unset, short_code=values.unset,
             page_token=None, page_number=None, page_size=None, **kwargs):
        params = values.of({
            "FriendlyName": friendly_name,
            "ShortCode": short_code,
            "PageToken": page_token,
            "Page": page_number,
            "PageSize": page_size,
        })
        params.update(kwargs)
        
        return self._version.page(
            self,
            ShortCodeInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def __call__(self, sid):
        """
        Constructs a ShortCodeContext
        
        :param sid: Contextual sid
        
        :returns: ShortCodeContext
        :rtype: ShortCodeContext
        """
        return ShortCodeContext(self._version, sid=sid, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.ShortCodeList>'


class ShortCodeContext(InstanceContext):

    def __init__(self, version, account_sid, sid):
        super(ShortCodeContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
            'sid': sid,
        }
        self._uri = "/Accounts/{account_sid}/SMS/ShortCodes/{sid}.json".format(**self._kwargs)

    def fetch(self):
        params = values.of({})
        
        return self._version.fetch(
            ShortCodeInstance,
            self._kwargs,
            'GET',
            self._uri,
            params=params,
        )

    def update(self, friendly_name=values.unset, api_version=values.unset,
               sms_url=values.unset, sms_method=values.unset,
               sms_fallback_url=values.unset, sms_fallback_method=values.unset):
        data = values.of({
            "FriendlyName": friendly_name,
            "ApiVersion": api_version,
            "SmsUrl": sms_url,
            "SmsMethod": sms_method,
            "SmsFallbackUrl": sms_fallback_url,
            "SmsFallbackMethod": sms_fallback_method,
        })
        
        return self._version.update(
            ShortCodeInstance,
            self._kwargs,
            'POST',
            self._uri,
            data=data,
        )


class ShortCodeInstance(InstanceResource):

    def __init__(self, version, payload, account_sid, sid=None):
        super(ShortCodeInstance, self).__init__(version)
        
        # Marshaled Properties
        self._properties = {
            'account_sid': payload['account_sid'],
            'api_version': payload['api_version'],
            'date_created': deserialize.rfc2822_datetime(payload['date_created']),
            'date_updated': deserialize.rfc2822_datetime(payload['date_updated']),
            'friendly_name': payload['friendly_name'],
            'short_code': payload['short_code'],
            'sid': payload['sid'],
            'sms_fallback_method': payload['sms_fallback_method'],
            'sms_fallback_url': payload['sms_fallback_url'],
            'sms_method': payload['sms_method'],
            'sms_url': payload['sms_url'],
            'uri': payload['uri'],
        }
        
        # Context
        self._lazy_context = None
        self._context_properties = {
            'account_sid': account_sid,
            'sid': sid or self._properties['sid'],
        }

    @property
    def _context(self):
        if self._lazy_context is None:
            self._lazy_context = ShortCodeContext(
                self._version,
                self._context_properties['account_sid'],
                self._context_properties['sid'],
            )
        return self._lazy_context

    @property
    def account_sid(self):
        """ The account_sid """
        return self._properties['account_sid']

    @property
    def api_version(self):
        """ The api_version """
        return self._properties['api_version']

    @property
    def date_created(self):
        """ The date_created """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """ The date_updated """
        return self._properties['date_updated']

    @property
    def friendly_name(self):
        """ The friendly_name """
        return self._properties['friendly_name']

    @property
    def short_code(self):
        """ The short_code """
        return self._properties['short_code']

    @property
    def sid(self):
        """ The sid """
        return self._properties['sid']

    @property
    def sms_fallback_method(self):
        """ The sms_fallback_method """
        return self._properties['sms_fallback_method']

    @property
    def sms_fallback_url(self):
        """ The sms_fallback_url """
        return self._properties['sms_fallback_url']

    @property
    def sms_method(self):
        """ The sms_method """
        return self._properties['sms_method']

    @property
    def sms_url(self):
        """ The sms_url """
        return self._properties['sms_url']

    @property
    def uri(self):
        """ The uri """
        return self._properties['uri']

    def fetch(self):
        self._context.fetch()

    def update(self, friendly_name=values.unset, api_version=values.unset,
               sms_url=values.unset, sms_method=values.unset,
               sms_fallback_url=values.unset, sms_fallback_method=values.unset):
        self._context.update(
            friendly_name=friendly_name,
            api_version=api_version,
            sms_url=sms_url,
            sms_method=sms_method,
            sms_fallback_url=sms_fallback_url,
            sms_fallback_method=sms_fallback_method,
        )
