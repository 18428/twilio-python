# coding=utf-8
"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /       
"""

from twilio.rest.api.v2010.account.sms.short_code import ShortCodeList
from twilio.rest.api.v2010.account.sms.sms_message import SmsMessageList
from twilio.rest.base import InstanceContext
from twilio.rest.base import InstanceResource
from twilio.rest.base import ListResource


class SmsList(ListResource):

    def __init__(self, version, account_sid):
        """
        Initialize the SmsList
        
        :param Version version: Version that contains the resource
        :param account_sid: A 34 character string that uniquely identifies this resource.
        
        :returns: SmsList
        :rtype: SmsList
        """
        super(SmsList, self).__init__(version)
        
        # Path Solution
        self._kwargs = {
            'account_sid': account_sid,
        }
        self._uri = '/Accounts/{account_sid}/SMS.json'.format(**self._kwargs)
        
        # Components
        self._messages = None
        self._short_codes = None

    @property
    def messages(self):
        """
        Access the messages
        
        :returns: SmsMessageList
        :rtype: SmsMessageList
        """
        if self._messages is None:
            self._messages = SmsMessageList(self._version, **self._kwargs)
        return self._messages

    @property
    def short_codes(self):
        """
        Access the short_codes
        
        :returns: ShortCodeList
        :rtype: ShortCodeList
        """
        if self._short_codes is None:
            self._short_codes = ShortCodeList(self._version, **self._kwargs)
        return self._short_codes

    def get(self):
        """
        Constructs a SmsContext
        
        :returns: SmsContext
        :rtype: SmsContext
        """
        return SmsContext(self._version, **self._kwargs)

    def __call__(self):
        """
        Constructs a SmsContext
        
        :returns: SmsContext
        :rtype: SmsContext
        """
        return SmsContext(self._version, **self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Api.V2010.SmsList>'


class SmsContext(InstanceContext):

    def __init__(self, version):
        """
        Initialize the SmsContext
        
        :param Version version
        
        :returns: SmsContext
        :rtype: SmsContext
        """
        super(SmsContext, self).__init__(version)
        
        # Path Solution
        self._kwargs = {}
        self._uri = 'None'.format(**self._kwargs)

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Api.V2010.SmsContext {}>'.format(context)


class SmsInstance(InstanceResource):

    def __init__(self, version, payload, account_sid):
        """
        Initialize the SmsInstance
        
        :returns: SmsInstance
        :rtype: SmsInstance
        """
        super(SmsInstance, self).__init__(version)
        # Context
        self._instance_context = None
        self._kwargs = {
            'account_sid': account_sid,
        }

    @property
    def _context(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context
        
        :returns: SmsContext for this SmsInstance
        :rtype: SmsContext
        """
        if self._instance_context is None:
            self._instance_context = SmsContext(
                self._version,
            )
        return self._instance_context

    def __repr__(self):
        """
        Provide a friendly representation
        
        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._kwargs.items())
        return '<Twilio.Api.V2010.SmsInstance {}>'.format(context)
